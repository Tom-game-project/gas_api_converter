{
  "service_name": "jdbc",
  "url": "https://developers.google.com/apps-script/reference/jdbc",
  "classes": [
    {
      "name": "Class Jdbc",
      "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc",
      "description": "",
      "methods": [
        {
          "parameters": [
            {
              "name": "url",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "A database URL of the formjdbc:google:mysql://subname."
            }
          ],
          "name": "getCloudSqlConnection(url)",
          "description": "Attempts to establish a connection to the given Google Cloud SQL URL.",
          "return_type": {
            "name": "JdbcConnection",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-connection"
          }
        },
        {
          "parameters": [
            {
              "name": "url",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "A database URL of the formjdbc:google:mysql://subname."
            },
            {
              "name": "info",
              "type": {
                "name": "Object",
                "url": null
              },
              "description": "Optional JavaScript object specifying advanced parameters as defined below."
            }
          ],
          "name": "getCloudSqlConnection(url, info)",
          "description": "Attempts to establish a connection to the given Google Cloud SQL URL.",
          "return_type": {
            "name": "JdbcConnection",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-connection"
          }
        },
        {
          "parameters": [
            {
              "name": "url",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "A database URL of the formjdbc:google:mysql://subname."
            },
            {
              "name": "userName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The username to pass to the database."
            },
            {
              "name": "password",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The user's password."
            }
          ],
          "name": "getCloudSqlConnection(url, userName, password)",
          "description": "Attempts to establish a connection to the given Google Cloud SQL URL.",
          "return_type": {
            "name": "JdbcConnection",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-connection"
          }
        },
        {
          "parameters": [
            {
              "name": "url",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "A database URL of the formjdbc:subprotocol:subname."
            }
          ],
          "name": "getConnection(url)",
          "description": "Attempts to establish a connection to the given database URL.",
          "return_type": {
            "name": "JdbcConnection",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-connection"
          }
        },
        {
          "parameters": [
            {
              "name": "url",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "A database URL of the formjdbc:subprotocol:subname."
            },
            {
              "name": "info",
              "type": {
                "name": "Object",
                "url": null
              },
              "description": "Optional JavaScript object specifying advanced parameters as defined below."
            }
          ],
          "name": "getConnection(url, info)",
          "description": "Attempts to establish a connection to the given database URL.",
          "return_type": {
            "name": "JdbcConnection",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-connection"
          }
        },
        {
          "parameters": [
            {
              "name": "url",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "A database URL of the formjdbc:subprotocol:subname."
            },
            {
              "name": "userName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The username to pass to the database."
            },
            {
              "name": "password",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The user's password."
            }
          ],
          "name": "getConnection(url, userName, password)",
          "description": "Attempts to establish a connection to the given database using a username and password.",
          "return_type": {
            "name": "JdbcConnection",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-connection"
          }
        },
        {
          "parameters": [
            {
              "name": "milliseconds",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "Milliseconds since epoch."
            }
          ],
          "name": "newDate(milliseconds)",
          "description": "Create a date from milliseconds since epoch.",
          "return_type": {
            "name": "JdbcDate",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-date"
          }
        },
        {
          "parameters": [
            {
              "name": "milliseconds",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "Milliseconds since epoch."
            }
          ],
          "name": "newTime(milliseconds)",
          "description": "Create a time from milliseconds since epoch.",
          "return_type": {
            "name": "JdbcTime",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-time"
          }
        },
        {
          "parameters": [
            {
              "name": "milliseconds",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "Milliseconds since epoch."
            }
          ],
          "name": "newTimestamp(milliseconds)",
          "description": "Create a timestamp from milliseconds since epoch.",
          "return_type": {
            "name": "JdbcTimestamp",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-timestamp"
          }
        },
        {
          "parameters": [
            {
              "name": "date",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "A string containing a SQL date string."
            }
          ],
          "name": "parseDate(date)",
          "description": "Create a date by parsing the SQL date string.",
          "return_type": {
            "name": "JdbcDate",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-date"
          }
        },
        {
          "parameters": [
            {
              "name": "time",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "A string containing a SQL time string."
            }
          ],
          "name": "parseTime(time)",
          "description": "Create a time by parsing the SQL time string.",
          "return_type": {
            "name": "JdbcTime",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-time"
          }
        },
        {
          "parameters": [
            {
              "name": "timestamp",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "A string containing a SQL timestamp string."
            }
          ],
          "name": "parseTimestamp(timestamp)",
          "description": "Create a timestamp by parsing the SQL timestamp string.",
          "return_type": {
            "name": "JdbcTimestamp",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-timestamp"
          }
        }
      ]
    },
    {
      "name": "Class JdbcArray",
      "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-array",
      "description": "",
      "methods": [
        {
          "parameters": [],
          "name": "free()",
          "description": "For documentation of this method, seejava.sql.Array#free().",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getArray()",
          "description": "For documentation of this method, seejava.sql.Array#getArray()",
          "return_type": {
            "name": "Object",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "index",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The array index of the first element to retrieve, where the first element has an\n    index of 1."
            },
            {
              "name": "count",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The number of successive SQL array elements to retrieve."
            }
          ],
          "name": "getArray(index, count)",
          "description": "For documentation of this method, seejava.sql.Array#getArray(long, int).",
          "return_type": {
            "name": "Object",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getBaseType()",
          "description": "For documentation of this method, seejava.sql.Array#getBaseType().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getBaseTypeName()",
          "description": "For documentation of this method, seejava.sql.Array#getBaseTypeName().",
          "return_type": {
            "name": "String",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getResultSet()",
          "description": "For documentation of this method, seejava.sql.Array#getResultSet().",
          "return_type": {
            "name": "JdbcResultSet",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-result-set"
          }
        },
        {
          "parameters": [
            {
              "name": "index",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The array index of the first element to retrieve, where the first element has an\n    index of 1."
            },
            {
              "name": "count",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The number of successive SQL array elements to retrieve."
            }
          ],
          "name": "getResultSet(index, count)",
          "description": "For documentation of this method, seejava.sql.Array#getResultSet(long, int).",
          "return_type": {
            "name": "JdbcResultSet",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-result-set"
          }
        }
      ]
    },
    {
      "name": "Class JdbcBlob",
      "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-blob",
      "description": "",
      "methods": [
        {
          "parameters": [],
          "name": "free()",
          "description": "For documentation of this method, seejava.sql.Blob#free().",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getAppsScriptBlob()",
          "description": "Gets the content of this JdbcBlob as an Apps Script blob.",
          "return_type": {
            "name": "Blob",
            "url": "https://developers.google.com/apps-script/reference/base/blob.html"
          }
        },
        {
          "parameters": [
            {
              "name": "contentType",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The MIME type to convert to. For most blobs,'application/pdf'is\n    the only valid option. For images in BMP, GIF, JPEG, or PNG format, any of'image/bmp','image/gif','image/jpeg', or'image/png'are also\n    valid. For a Google Docs document,'text/markdown'is also valid."
            }
          ],
          "name": "getAs(contentType)",
          "description": "Return the data inside this object as a blob converted to the specified content type. This\nmethod adds the appropriate extension to the filename—for example, \"myfile.pdf\". However, it\nassumes that the part of the filename that follows the last period (if any) is an existing\nextension that should be replaced. Consequently, \"ShoppingList.12.25.2014\" becomes\n\"ShoppingList.12.25.pdf\".",
          "return_type": {
            "name": "Blob",
            "url": "https://developers.google.com/apps-script/reference/base/blob.html"
          }
        },
        {
          "parameters": [
            {
              "name": "position",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The ordinal position of the first byte in the blob value to be extracted; the\n    first byte is at position 1."
            },
            {
              "name": "length",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The number of consecutive bytes to copy; the value for length must be zero or\n    greater."
            }
          ],
          "name": "getBytes(position, length)",
          "description": "For documentation of this method, seejava.sql.Blob#getBytes(long, int).",
          "return_type": {
            "name": "Byte[]",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "length()",
          "description": "For documentation of this method, seejava.sql.Blob#length().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "pattern",
              "type": {
                "name": "Byte[]",
                "url": null
              },
              "description": "The byte array to search for."
            },
            {
              "name": "start",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The position in the blob value where to beging searching; the first position is 1."
            }
          ],
          "name": "position(pattern, start)",
          "description": "For documentation of this method, seejava.sql.Blob#position(byte[], long).",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "pattern",
              "type": {
                "name": "JdbcBlob",
                "url": "https://developers.google.com/apps-script/reference"
              },
              "description": "TheJdbcBlobindicating the value to search for."
            },
            {
              "name": "start",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The position in the blob value where to beging searching; the first position is 1."
            }
          ],
          "name": "position(pattern, start)",
          "description": "For documentation of this method, seejava.sql.Blob#position(blob, long).",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "position",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The position in the blob at which to start writing; the first position is 1."
            },
            {
              "name": "blobSource",
              "type": {
                "name": "BlobSource",
                "url": "https://developers.google.com/apps-script/reference/base/blob-source.html"
              },
              "description": "The source of data to write to this blob."
            }
          ],
          "name": "setBytes(position, blobSource)",
          "description": "Convenience method for writing aJdbcBlobto this blob.",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "position",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The position in the blob at which to start writing; the first position is 1."
            },
            {
              "name": "blobSource",
              "type": {
                "name": "BlobSource",
                "url": "https://developers.google.com/apps-script/reference/base/blob-source.html"
              },
              "description": "The source of data to write to this blob."
            },
            {
              "name": "offset",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The offset into the provided byte array at which to start reading bytes to set."
            },
            {
              "name": "length",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The number of bytes to write to the blob."
            }
          ],
          "name": "setBytes(position, blobSource, offset, length)",
          "description": "Convenience method for writing aJdbcBlobto this blob.",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "position",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The position in the blob at which to start writing; the first position is 1."
            },
            {
              "name": "bytes",
              "type": {
                "name": "Byte[]",
                "url": null
              },
              "description": "The array of bytes to write to this blob."
            }
          ],
          "name": "setBytes(position, bytes)",
          "description": "For documentation of this method, seejava.sql.Blob#setBytes(long, byte[]).",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "position",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The position in the blob at which to start writing; the first position is 1."
            },
            {
              "name": "bytes",
              "type": {
                "name": "Byte[]",
                "url": null
              },
              "description": "The array of bytes to write to this blob."
            },
            {
              "name": "offset",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The offset into the provided byte array at which to start reading bytes to set."
            },
            {
              "name": "length",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The number of bytes to write to the blob."
            }
          ],
          "name": "setBytes(position, bytes, offset, length)",
          "description": "For documentation of this method, seejava.sql.Blob#setBytes(long, byte[], int, int).",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "length",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The size (in bytes) of this blob after truncation."
            }
          ],
          "name": "truncate(length)",
          "description": "For documentation of this method, seejava.sql.Blob#truncate(long).",
          "return_type": {
            "name": "void",
            "url": null
          }
        }
      ]
    },
    {
      "name": "Class JdbcCallableStatement",
      "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-callable-statement",
      "description": "",
      "methods": [
        {
          "parameters": [],
          "name": "addBatch()",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#addBatch().",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "sql",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The SQL command to add to this statement, typically an SQLINSERTorUPDATE."
            }
          ],
          "name": "addBatch(sql)",
          "description": "For documentation of this method, seejava.sql.Statement#addBatch(String).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "cancel()",
          "description": "For documentation of this method, seejava.sql.Statement#cancel().",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "clearBatch()",
          "description": "For documentation of this method, seejava.sql.Statement#clearBatch().",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "clearParameters()",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#clearParameters().",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "clearWarnings()",
          "description": "For documentation of this method, seejava.sql.Statement#clearWarnings().",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "close()",
          "description": "For documentation of this method, seejava.sql.Statement#close().",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "execute()",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#execute().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "sql",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The SQL statement to execute."
            }
          ],
          "name": "execute(sql)",
          "description": "For documentation of this method, seejava.sql.Statement#execute(String).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "sql",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The SQL statement to execute."
            },
            {
              "name": "autoGeneratedKeys",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "A flag that indicates whether auto-generated keys are made available\n    for future retrieval; eitherJdbc.Statement.RETURN_GENERATED_KEYSorJdbc.Statement.NO_GENERATED_KEYS."
            }
          ],
          "name": "execute(sql, autoGeneratedKeys)",
          "description": "For documentation of this method, seejava.sql.Statement#execute(String, int).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "sql",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The SQL statement to execute."
            },
            {
              "name": "columnIndexes",
              "type": {
                "name": "Integer[]",
                "url": null
              },
              "description": "The column indices in the whose auto-generated keys are made available for\n    future retrieval."
            }
          ],
          "name": "execute(sql, columnIndexes)",
          "description": "For documentation of this method, seejava.sql.Statement#execute(String, int[]).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "sql",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The SQL statement to execute."
            },
            {
              "name": "columnNames",
              "type": {
                "name": "String[]",
                "url": null
              },
              "description": "The names of columns in the whose auto-generated keys are made available for\n    future retrieval."
            }
          ],
          "name": "execute(sql, columnNames)",
          "description": "For documentation of this method, seejava.sql.Statement#execute(String, String[]).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "executeBatch()",
          "description": "For documentation of this method, seejava.sql.Statement#executeBatch().",
          "return_type": {
            "name": "Integer[]",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "executeQuery()",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#executeQuery().",
          "return_type": {
            "name": "JdbcResultSet",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-result-set"
          }
        },
        {
          "parameters": [
            {
              "name": "sql",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The SQL statement to execute, typically a staticSELECT."
            }
          ],
          "name": "executeQuery(sql)",
          "description": "For documentation of this method, seejava.sql.Statement#executeQuery(String).",
          "return_type": {
            "name": "JdbcResultSet",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-result-set"
          }
        },
        {
          "parameters": [],
          "name": "executeUpdate()",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#executeUpdate().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "sql",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The SQL Data Manipulation Language statement to execute (such asINSERT,UPDATE, orDELETE), or else a statement that returns nothing (such as a DDL\n    statement)."
            }
          ],
          "name": "executeUpdate(sql)",
          "description": "For documentation of this method, seejava.sql.Statement#executeUpdate(String).",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "sql",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The SQL Data Manipulation Language statement to execute (such asINSERT,UPDATE, orDELETE), or else a statement that returns nothing (such as a DDL\n    statement)."
            },
            {
              "name": "autoGeneratedKeys",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "A flag that indicates whether auto-generated keys are made available\n    for future retrieval; eitherJdbc.Statement.RETURN_GENERATED_KEYSorJdbc.Statement.NO_GENERATED_KEYS."
            }
          ],
          "name": "executeUpdate(sql, autoGeneratedKeys)",
          "description": "For documentation of this method, seejava.sql.Statement#executeUpdate(String, int).",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "sql",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The SQL Data Manipulation Language statement to execute (such asINSERT,UPDATE, orDELETE), or else a statement that returns nothing (such as a DDL\n    statement)."
            },
            {
              "name": "columnIndexes",
              "type": {
                "name": "Integer[]",
                "url": null
              },
              "description": "The column indices in the whose auto-generated keys are made available for\n    future retrieval."
            }
          ],
          "name": "executeUpdate(sql, columnIndexes)",
          "description": "For documentation of this method, seejava.sql.Statement#executeUpdate(String, int[]).",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "sql",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The SQL Data Manipulation Language statement to execute (such asINSERT,UPDATE, orDELETE), or else a statement that returns nothing (such as a DDL\n    statement)."
            },
            {
              "name": "columnNames",
              "type": {
                "name": "String[]",
                "url": null
              },
              "description": "The names of columns in the whose auto-generated keys are made available for\n    future retrieval."
            }
          ],
          "name": "executeUpdate(sql, columnNames)",
          "description": "For documentation of this method, seejava.sql.Statement#executeUpdate(String, String[]).",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to retrieve (the first parameter is 1, the\n    second is 2, and so on)."
            }
          ],
          "name": "getArray(parameterIndex)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getArray(int).",
          "return_type": {
            "name": "JdbcArray",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-array"
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter."
            }
          ],
          "name": "getArray(parameterName)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getArray(String).",
          "return_type": {
            "name": "JdbcArray",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-array"
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to retrieve (the first parameter is 1, the\n    second is 2, and so on)."
            }
          ],
          "name": "getBigDecimal(parameterIndex)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getBigDecimal(int).",
          "return_type": {
            "name": "BigNumber",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter."
            }
          ],
          "name": "getBigDecimal(parameterName)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getBigDecimal(String).",
          "return_type": {
            "name": "BigNumber",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to retrieve (the first parameter is 1, the\n    second is 2, and so on)."
            }
          ],
          "name": "getBlob(parameterIndex)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getBlob(int).",
          "return_type": {
            "name": "JdbcBlob",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-blob"
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter."
            }
          ],
          "name": "getBlob(parameterName)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getBlob(String).",
          "return_type": {
            "name": "JdbcBlob",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-blob"
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to retrieve (the first parameter is 1, the\n    second is 2, and so on)."
            }
          ],
          "name": "getBoolean(parameterIndex)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getBoolean(int).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter."
            }
          ],
          "name": "getBoolean(parameterName)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getBoolean(String).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to retrieve (the first parameter is 1, the\n    second is 2, and so on)."
            }
          ],
          "name": "getByte(parameterIndex)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getByte(int).",
          "return_type": {
            "name": "Byte",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter."
            }
          ],
          "name": "getByte(parameterName)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getByte(String).",
          "return_type": {
            "name": "Byte",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to retrieve (the first parameter is 1, the\n    second is 2, and so on)."
            }
          ],
          "name": "getBytes(parameterIndex)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getBytes(int).",
          "return_type": {
            "name": "Byte[]",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter."
            }
          ],
          "name": "getBytes(parameterName)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getBytes(String).",
          "return_type": {
            "name": "Byte[]",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to retrieve (the first parameter is 1, the\n    second is 2, and so on)."
            }
          ],
          "name": "getClob(parameterIndex)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getClob(int).",
          "return_type": {
            "name": "JdbcClob",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-clob"
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter."
            }
          ],
          "name": "getClob(parameterName)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getClob(String).",
          "return_type": {
            "name": "JdbcClob",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-clob"
          }
        },
        {
          "parameters": [],
          "name": "getConnection()",
          "description": "For documentation of this method, seejava.sql.Statement#getConnection().",
          "return_type": {
            "name": "JdbcConnection",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-connection"
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to retrieve (the first parameter is 1, the\n    second is 2, and so on)."
            }
          ],
          "name": "getDate(parameterIndex)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getDate(int).",
          "return_type": {
            "name": "JdbcDate",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-date"
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to retrieve (the first parameter is 1, the\n    second is 2, and so on)."
            },
            {
              "name": "timeZone",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "A time zone string used to constructjava.lang.Calendarinstance, which in turn is used to build the date. Several formats\n    of time zone strings are recognized: short IDs (such asPST,EST, andGMT), long IDs (such asUS/PacificandAmerica/Los_Angeles), and\n    offsets (such asGMT+6:30)."
            }
          ],
          "name": "getDate(parameterIndex, timeZone)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getDate(int, Calendar).",
          "return_type": {
            "name": "JdbcDate",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-date"
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter."
            }
          ],
          "name": "getDate(parameterName)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getDate(String).",
          "return_type": {
            "name": "JdbcDate",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-date"
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter."
            },
            {
              "name": "timeZone",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "A time zone string used to constructjava.lang.Calendarinstance, which in turn is used to build the date. Several formats\n    of time zone strings are recognized: short IDs (such asPST,EST, andGMT), long IDs (such asUS/PacificandAmerica/Los_Angeles), and\n    offsets (such asGMT+6:30)."
            }
          ],
          "name": "getDate(parameterName, timeZone)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getDate(String, Calendar).",
          "return_type": {
            "name": "JdbcDate",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-date"
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to retrieve (the first parameter is 1, the\n    second is 2, and so on)."
            }
          ],
          "name": "getDouble(parameterIndex)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getDouble(int).",
          "return_type": {
            "name": "Number",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter."
            }
          ],
          "name": "getDouble(parameterName)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getDouble(String).",
          "return_type": {
            "name": "Number",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getFetchDirection()",
          "description": "For documentation of this method, seejava.sql.Statement#getFetchDirection().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getFetchSize()",
          "description": "For documentation of this method, seejava.sql.Statement#getFetchSize().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to retrieve (the first parameter is 1, the\n    second is 2, and so on)."
            }
          ],
          "name": "getFloat(parameterIndex)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getFloat(int).",
          "return_type": {
            "name": "Number",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter."
            }
          ],
          "name": "getFloat(parameterName)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getFloat(String).",
          "return_type": {
            "name": "Number",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getGeneratedKeys()",
          "description": "For documentation of this method, seejava.sql.Statement#getGeneratedKeys().",
          "return_type": {
            "name": "JdbcResultSet",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-result-set"
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to retrieve (the first parameter is 1, the\n    second is 2, and so on)."
            }
          ],
          "name": "getInt(parameterIndex)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getInt(int).",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter."
            }
          ],
          "name": "getInt(parameterName)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getInt(String).",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to retrieve (the first parameter is 1, the\n    second is 2, and so on)."
            }
          ],
          "name": "getLong(parameterIndex)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getLong(int).",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter."
            }
          ],
          "name": "getLong(parameterName)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getLong(String).",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getMaxFieldSize()",
          "description": "For documentation of this method, seejava.sql.Statement#getMaxFieldSize().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getMaxRows()",
          "description": "For documentation of this method, seejava.sql.Statement#getMaxRows().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getMetaData()",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#getMetaData().",
          "return_type": {
            "name": "JdbcResultSetMetaData",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-result-set-meta-data"
          }
        },
        {
          "parameters": [],
          "name": "getMoreResults()",
          "description": "For documentation of this method, seejava.sql.Statement#getMoreResults().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "current",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "A flag that indicates what happens to current result sets when retrieved. This\n    value is one ofJdbc.Statement.CLOSE_CURRENT_RESULT,Jdbc.Statement.KEEP_CURRENT_RESULT, orJdbc.Statement.CLOSE_ALL_RESULTS."
            }
          ],
          "name": "getMoreResults(current)",
          "description": "For documentation of this method, seejava.sql.Statement#getMoreResults(int).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "An index indicating which paramater to register (the first parameter is\n    1, the second is 2, and so on)."
            }
          ],
          "name": "getNClob(parameterIndex)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getNClob(int).",
          "return_type": {
            "name": "JdbcClob",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-clob"
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter."
            }
          ],
          "name": "getNClob(parameterName)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getNClob(String).",
          "return_type": {
            "name": "JdbcClob",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-clob"
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "An index indicating which paramater to register (the first parameter is\n    1, the second is 2, and so on)."
            }
          ],
          "name": "getNString(parameterIndex)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getNString(int).",
          "return_type": {
            "name": "String",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter."
            }
          ],
          "name": "getNString(parameterName)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getNString(String).",
          "return_type": {
            "name": "String",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to retrieve (the first parameter is 1, the\n    second is 2, and so on)."
            }
          ],
          "name": "getObject(parameterIndex)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getObject(int).",
          "return_type": {
            "name": "Object",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter."
            }
          ],
          "name": "getObject(parameterName)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getObject(String).",
          "return_type": {
            "name": "Object",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getParameterMetaData()",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#getParameterMetaData().",
          "return_type": {
            "name": "JdbcParameterMetaData",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-parameter-meta-data"
          }
        },
        {
          "parameters": [],
          "name": "getQueryTimeout()",
          "description": "For documentation of this method, seejava.sql.Statement#getQueryTimeout().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to retrieve (the first parameter is 1, the\n    second is 2, and so on)."
            }
          ],
          "name": "getRef(parameterIndex)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getRef(int).",
          "return_type": {
            "name": "JdbcRef",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-ref"
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter."
            }
          ],
          "name": "getRef(parameterName)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getRef(String).",
          "return_type": {
            "name": "JdbcRef",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-ref"
          }
        },
        {
          "parameters": [],
          "name": "getResultSet()",
          "description": "For documentation of this method, seejava.sql.Statement#getResultSet().",
          "return_type": {
            "name": "JdbcResultSet",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-result-set"
          }
        },
        {
          "parameters": [],
          "name": "getResultSetConcurrency()",
          "description": "For documentation of this method, seejava.sql.Statement#getResultSetConcurrency().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getResultSetHoldability()",
          "description": "For documentation of this method, seejava.sql.Statement#getResultSetHoldability().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getResultSetType()",
          "description": "For documentation of this method, seejava.sql.Statement#getResultSetType().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "An index indicating which paramater to register (the first parameter is\n    1, the second is 2, and so on)."
            }
          ],
          "name": "getRowId(parameterIndex)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getRowId(int).",
          "return_type": {
            "name": "JdbcRowId",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-row-id"
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter."
            }
          ],
          "name": "getRowId(parameterName)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getRowId(String).",
          "return_type": {
            "name": "JdbcRowId",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-row-id"
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "An index indicating which paramater to register (the first parameter is\n    1, the second is 2, and so on)."
            }
          ],
          "name": "getSQLXML(parameterIndex)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getSQLXML(int).",
          "return_type": {
            "name": "JdbcSQLXML",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-sqlxml"
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter."
            }
          ],
          "name": "getSQLXML(parameterName)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getSQLXML(String).",
          "return_type": {
            "name": "JdbcSQLXML",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-sqlxml"
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to retrieve (the first parameter is 1, the\n    second is 2, and so on)."
            }
          ],
          "name": "getShort(parameterIndex)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getShort(int).",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter."
            }
          ],
          "name": "getShort(parameterName)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getShort(String).",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to retrieve (the first parameter is 1, the\n    second is 2, and so on)."
            }
          ],
          "name": "getString(parameterIndex)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getString(int).",
          "return_type": {
            "name": "String",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter."
            }
          ],
          "name": "getString(parameterName)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getString(String).",
          "return_type": {
            "name": "String",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to retrieve (the first parameter is 1, the\n    second is 2, and so on)."
            }
          ],
          "name": "getTime(parameterIndex)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getTime(int).",
          "return_type": {
            "name": "JdbcTime",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-time"
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to retrieve (the first parameter is 1, the\n    second is 2, and so on)."
            },
            {
              "name": "timeZone",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "A time zone string used to constructjava.lang.Calendarinstance, which in turn is used to build the date. Several formats\n    of time zone strings are recognized: short IDs (such asPST,EST, andGMT), long IDs (such asUS/PacificandAmerica/Los_Angeles), and\n    offsets (such asGMT+6:30)."
            }
          ],
          "name": "getTime(parameterIndex, timeZone)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getTime(int, Calendar).",
          "return_type": {
            "name": "JdbcTime",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-time"
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter."
            }
          ],
          "name": "getTime(parameterName)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getTime(String).",
          "return_type": {
            "name": "JdbcTime",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-time"
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter."
            },
            {
              "name": "timeZone",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "A time zone string used to constructjava.lang.Calendarinstance, which in turn is used to build the date. Several formats\n    of time zone strings are recognized: short IDs (such asPST,EST, andGMT), long IDs (such asUS/PacificandAmerica/Los_Angeles), and\n    offsets (such asGMT+6:30)."
            }
          ],
          "name": "getTime(parameterName, timeZone)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getTime(String, Calendar).",
          "return_type": {
            "name": "JdbcTime",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-time"
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to retrieve (the first parameter is 1, the\n    second is 2, and so on)."
            }
          ],
          "name": "getTimestamp(parameterIndex)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getTimestamp(int).",
          "return_type": {
            "name": "JdbcTimestamp",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-timestamp"
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to retrieve (the first parameter is 1, the\n    second is 2, and so on)."
            },
            {
              "name": "timeZone",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "A time zone string used to constructjava.lang.Calendarinstance, which in turn is used to build the date. Several formats\n    of time zone strings are recognized: short IDs (such asPST,EST, andGMT), long IDs (such asUS/PacificandAmerica/Los_Angeles), and\n    offsets (such asGMT+6:30)."
            }
          ],
          "name": "getTimestamp(parameterIndex, timeZone)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getTimestamp(int, Calendar).",
          "return_type": {
            "name": "JdbcTimestamp",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-timestamp"
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter."
            }
          ],
          "name": "getTimestamp(parameterName)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getTimestamp(String).",
          "return_type": {
            "name": "JdbcTimestamp",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-timestamp"
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter."
            },
            {
              "name": "timeZone",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "A time zone string used to constructjava.lang.Calendarinstance, which in turn is used to build the date. Several formats\n    of time zone strings are recognized: short IDs (such asPST,EST, andGMT), long IDs (such asUS/PacificandAmerica/Los_Angeles), and\n    offsets (such asGMT+6:30)."
            }
          ],
          "name": "getTimestamp(parameterName, timeZone)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getTimestamp(String, Calendar).",
          "return_type": {
            "name": "JdbcTimestamp",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-timestamp"
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to retrieve (the first parameter is 1, the\n    second is 2, and so on)."
            }
          ],
          "name": "getURL(parameterIndex)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getURL(int).",
          "return_type": {
            "name": "String",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter."
            }
          ],
          "name": "getURL(parameterName)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#getURL(String).",
          "return_type": {
            "name": "String",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getUpdateCount()",
          "description": "For documentation of this method, seejava.sql.Statement#getUpdateCount().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getWarnings()",
          "description": "For documentation of this method, seejava.sql.Statement#getWarnings().",
          "return_type": {
            "name": "String[]",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "isClosed()",
          "description": "For documentation of this method, seejava.sql.Statement#isClosed().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "isPoolable()",
          "description": "For documentation of this method, seejava.sql.Statement#isPoolable().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "An index indicating which paramater to register (the first parameter is\n    1, the second is 2, and so on)."
            },
            {
              "name": "sqlType",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The JDBCtype codeto\n    register. If the parameter is of JDBC typeNUMERICorDECIMAL,\n    useregisterOutParameter(parameterIndex, sqlType, scale)instead."
            }
          ],
          "name": "registerOutParameter(parameterIndex, sqlType)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#registerOutParameter(int, int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "An index indicating which paramater to register (the first parameter is\n    1, the second is 2, and so on)."
            },
            {
              "name": "sqlType",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The JDBCtype codeto\n    register."
            },
            {
              "name": "scale",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The desired number of digits to the right of the decimal point (must be zero or\n    greater)."
            }
          ],
          "name": "registerOutParameter(parameterIndex, sqlType, scale)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#registerOutParameter(int, int, int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to retrieve (the first parameter is 1, the\n    second is 2, and so on)."
            },
            {
              "name": "sqlType",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "Atype\n    codevalue."
            },
            {
              "name": "typeName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The fully-qualified name of an SQL structured type."
            }
          ],
          "name": "registerOutParameter(parameterIndex, sqlType, typeName)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#registerOutParameter(int, int, String).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter to be registered."
            },
            {
              "name": "sqlType",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "Atype\n    codevalue."
            }
          ],
          "name": "registerOutParameter(parameterName, sqlType)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#registerOutParameter(String, int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter to be registered."
            },
            {
              "name": "sqlType",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "Atype\n    codevalue."
            },
            {
              "name": "scale",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The desired number of digits to the right of the decimal point, which must be zero\n    or greater."
            }
          ],
          "name": "registerOutParameter(parameterName, sqlType, scale)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#registerOutParameter(String, int, int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter to be registered."
            },
            {
              "name": "sqlType",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "Atype\n    codevalue."
            },
            {
              "name": "typeName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The fully-qualified name of an SQL structured type."
            }
          ],
          "name": "registerOutParameter(parameterName, sqlType, typeName)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#registerOutParameter(String, int, String).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcArray",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-array"
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setArray(parameterIndex, x)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setArray(int, Array).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "BigNumber",
                "url": null
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setBigDecimal(parameterIndex, x)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setBigDecimal(int, BigDecimal).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter to set."
            },
            {
              "name": "x",
              "type": {
                "name": "BigNumber",
                "url": null
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setBigDecimal(parameterName, x)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#setBigDecimal(String, BigDecimal).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcBlob",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-blob"
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setBlob(parameterIndex, x)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setBlob(int, Clob).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter to set."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcBlob",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-blob"
              },
              "description": "A blob that maps to an SQLBLOBvalue."
            }
          ],
          "name": "setBlob(parameterName, x)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#setBlob(String, Blob).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "Boolean",
                "url": null
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setBoolean(parameterIndex, x)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setBoolean(int, boolean).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter to set."
            },
            {
              "name": "x",
              "type": {
                "name": "Boolean",
                "url": null
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setBoolean(parameterName, x)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#setBoolean(String, boolean).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "Byte",
                "url": null
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setByte(parameterIndex, x)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setByte(int, byte).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter to set."
            },
            {
              "name": "x",
              "type": {
                "name": "Byte",
                "url": null
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setByte(parameterName, x)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#setByte(String, byte).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "Byte[]",
                "url": null
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setBytes(parameterIndex, x)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setBytes(int, byte[]).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter to set."
            },
            {
              "name": "x",
              "type": {
                "name": "Byte[]",
                "url": null
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setBytes(parameterName, x)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#setBytes(String, byte[]).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcClob",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-clob"
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setClob(parameterIndex, x)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setClob(int, Clob).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter to set."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcClob",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-clob"
              },
              "description": "A clob that maps to an SQLCLOBvalue."
            }
          ],
          "name": "setClob(parameterName, x)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#setBlob(String, Clob).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "name",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The new cursor name, which must be unique within a connection."
            }
          ],
          "name": "setCursorName(name)",
          "description": "For documentation of this method, seejava.sql.Statement#setCursorName(String).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcDate",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-date"
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setDate(parameterIndex, x)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setDate(int, Date).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcDate",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-date"
              },
              "description": "The parameter value to set."
            },
            {
              "name": "timeZone",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "A time zone string used to constructjava.lang.Calendarinstance, which in turn is used to build the date. Several formats\n    of time zone strings are recognized: short IDs (such asPST,EST, andGMT), long IDs (such asUS/PacificandAmerica/Los_Angeles), and\n    offsets (such asGMT+6:30)."
            }
          ],
          "name": "setDate(parameterIndex, x, timeZone)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setDate(int, Date, Calendar).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter to set."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcDate",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-date"
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setDate(parameterName, x)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#setDate(String, Date).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter to set."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcDate",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-date"
              },
              "description": "The parameter value to set."
            },
            {
              "name": "timeZone",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "A time zone string used to constructjava.lang.Calendarinstance, which in turn is used to build the date. Several formats\n    of time zone strings are recognized: short IDs (such asPST,EST, andGMT), long IDs (such asUS/PacificandAmerica/Los_Angeles), and\n    offsets (such asGMT+6:30)."
            }
          ],
          "name": "setDate(parameterName, x, timeZone)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#setDate(String, Date, Calendar).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "Number",
                "url": null
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setDouble(parameterIndex, x)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setDouble(int, double).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter to set."
            },
            {
              "name": "x",
              "type": {
                "name": "Number",
                "url": null
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setDouble(parameterName, x)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#setDouble(String, double).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "enable",
              "type": {
                "name": "Boolean",
                "url": null
              },
              "description": "Iftrue, escape processing is enabled; otherwise it is disabled."
            }
          ],
          "name": "setEscapeProcessing(enable)",
          "description": "For documentation of this method, seejava.sql.Statement#setEscapeProcessing(boolean).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "direction",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The specified direction to set, which is eitherJdbc.ResultSet.FETCH_FORWARDorJdbc.ResultSet.FETCH_REVERSE."
            }
          ],
          "name": "setFetchDirection(direction)",
          "description": "For documentation of this method, seejava.sql.Statement#setFetchDirection(int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "rows",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The number of rows to fetch."
            }
          ],
          "name": "setFetchSize(rows)",
          "description": "For documentation of this method, seejava.sql.Statement#setFetchSize(int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "Number",
                "url": null
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setFloat(parameterIndex, x)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setFloat(int, float).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter to set."
            },
            {
              "name": "x",
              "type": {
                "name": "Number",
                "url": null
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setFloat(parameterName, x)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#setFloat(String, float).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setInt(parameterIndex, x)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setInt(int, int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter to set."
            },
            {
              "name": "x",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setInt(parameterName, x)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#setInt(String, int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setLong(parameterIndex, x)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setLong(int, long).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter to set."
            },
            {
              "name": "x",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setLong(parameterName, x)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#setLong(String, long).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "max",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The new column byte size limit; a value of zero indicates no limit."
            }
          ],
          "name": "setMaxFieldSize(max)",
          "description": "For documentation of this method, seejava.sql.Statement#setMaxFieldSize(int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "max",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The maximum number of rows a result set generated by this statement can have. A\n    value of 0 indicates no limit."
            }
          ],
          "name": "setMaxRows(max)",
          "description": "For documentation of this method, seejava.sql.Statement#setMaxRows(int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcClob",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-clob"
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setNClob(parameterIndex, x)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setNClob(int, NClob).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter to set."
            },
            {
              "name": "value",
              "type": {
                "name": "JdbcClob",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-clob"
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setNClob(parameterName, value)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#setNClob(String, NClob).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setNString(parameterIndex, x)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setNString(int, String).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter to set."
            },
            {
              "name": "value",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setNString(parameterName, value)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#setNString(String, String).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "sqlType",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "TheSQL\n    typeof the specified parameter."
            }
          ],
          "name": "setNull(parameterIndex, sqlType)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setNull(int, int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "sqlType",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "TheSQL\n    typeof the specified parameter."
            },
            {
              "name": "typeName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The fully-qualifed name of an SQL user-defined type. Ignored if the parameter\n    isn't a user-defined type orREF."
            }
          ],
          "name": "setNull(parameterIndex, sqlType, typeName)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setNull(int, int, String).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter to set."
            },
            {
              "name": "sqlType",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The SQLtype code."
            }
          ],
          "name": "setNull(parameterName, sqlType)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#setNull(String, int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter to set."
            },
            {
              "name": "sqlType",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "TheSQL\n    type."
            },
            {
              "name": "typeName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The fully-qualified name of an SQL user-defined type; ignored if the parameter\n    is not a user-defined type or SQLREFvalue."
            }
          ],
          "name": "setNull(parameterName, sqlType, typeName)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#setNull(String, int, String).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "index",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second is 2, and\n    so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "Object",
                "url": null
              },
              "description": "The object containing the value to set the parameter to."
            }
          ],
          "name": "setObject(index, x)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setObject(int, Object).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "Object",
                "url": null
              },
              "description": "The object containing the value to set the parameter to."
            },
            {
              "name": "targetSqlType",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "TheSQL typeto send\n    to the database."
            }
          ],
          "name": "setObject(parameterIndex, x, targetSqlType)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setObject(int, Object, int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "Object",
                "url": null
              },
              "description": "The object containing the value to set the parameter to."
            },
            {
              "name": "targetSqlType",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "TheSQL typeto send\n    to the database. The scale argument may further qualify this type."
            },
            {
              "name": "scaleOrLength",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The number of digits after the decimal forDECIMALorNUMERICtypes, or the length of data forInputStreamorReadertypes.\n    Ignored for all other types."
            }
          ],
          "name": "setObject(parameterIndex, x, targetSqlType, scaleOrLength)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setObject(int, Object, int, int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter to set."
            },
            {
              "name": "x",
              "type": {
                "name": "Object",
                "url": null
              },
              "description": "The object containing the value to set."
            }
          ],
          "name": "setObject(parameterName, x)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#setObject(String, Object).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter to set."
            },
            {
              "name": "x",
              "type": {
                "name": "Object",
                "url": null
              },
              "description": "The object containing the value to set."
            },
            {
              "name": "targetSqlType",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "TheSQL typesent to\n    the database."
            }
          ],
          "name": "setObject(parameterName, x, targetSqlType)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#setObject(String, Object, int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter to set."
            },
            {
              "name": "x",
              "type": {
                "name": "Object",
                "url": null
              },
              "description": "The object containing the value to set."
            },
            {
              "name": "targetSqlType",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "TheSQL typesent to\n    the database. The scale parameter may further qualify this type."
            },
            {
              "name": "scale",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The number of digits after the decimal point forDECIMALandNUMERICtypes. Ignored for all other types."
            }
          ],
          "name": "setObject(parameterName, x, targetSqlType, scale)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#setObject(String, Object, int, int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "poolable",
              "type": {
                "name": "Boolean",
                "url": null
              },
              "description": "Iftrue, requests that this statement be pooled; otherwise requests it\n    not be pooled."
            }
          ],
          "name": "setPoolable(poolable)",
          "description": "For documentation of this method, seejava.sql.Statement#setPoolable(boolean).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "seconds",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The new query timeout in seconds; a value of 0 indicates no timeout."
            }
          ],
          "name": "setQueryTimeout(seconds)",
          "description": "For documentation of this method, seejava.sql.Statement#setQueryTimeout(int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcRef",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-ref"
              },
              "description": "The SQLREFvalue to set."
            }
          ],
          "name": "setRef(parameterIndex, x)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setRef(int, Ref).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcRowId",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-row-id"
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setRowId(parameterIndex, x)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setRowId(int, RowId).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter to set."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcRowId",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-row-id"
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setRowId(parameterName, x)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#setRowId(String, RowId).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcSQLXML",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-sqlxml"
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setSQLXML(parameterIndex, x)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setSQLXML(int, SQLXML).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter to set."
            },
            {
              "name": "xmlObject",
              "type": {
                "name": "JdbcSQLXML",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-sqlxml"
              },
              "description": "A SQLXML object that maps to an SQL XML value."
            }
          ],
          "name": "setSQLXML(parameterName, xmlObject)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#setSQLXML(String, SQLXML).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setShort(parameterIndex, x)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setShort(int, short).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter to set."
            },
            {
              "name": "x",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setShort(parameterName, x)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#setShort(String, short).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setString(parameterIndex, x)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setString(int, String).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter to set."
            },
            {
              "name": "x",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setString(parameterName, x)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#setString(String, String).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcTime",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-time"
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setTime(parameterIndex, x)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setTime(int, Time).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcTime",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-time"
              },
              "description": "The parameter value to set."
            },
            {
              "name": "timeZone",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "A time zone string used to constructjava.lang.Calendarinstance, which in turn is used to build the date. Several formats\n    of time zone strings are recognized: short IDs (such asPST,EST, andGMT), long IDs (such asUS/PacificandAmerica/Los_Angeles), and\n    offsets (such asGMT+6:30)."
            }
          ],
          "name": "setTime(parameterIndex, x, timeZone)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setTime(int, Time, Calendar).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter to set."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcTime",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-time"
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setTime(parameterName, x)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#setTime(String, Time).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter to set."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcTime",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-time"
              },
              "description": "The parameter value to set."
            },
            {
              "name": "timeZone",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "A time zone string used to constructjava.lang.Calendarinstance, which in turn is used to build the date. Several formats\n    of time zone strings are recognized: short IDs (such asPST,EST, andGMT), long IDs (such asUS/PacificandAmerica/Los_Angeles), and\n    offsets (such asGMT+6:30)."
            }
          ],
          "name": "setTime(parameterName, x, timeZone)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#setTime(String, Time, Calendar).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcTimestamp",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-timestamp"
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setTimestamp(parameterIndex, x)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setTimestamp(int, Timestamp).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcTimestamp",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-timestamp"
              },
              "description": "The parameter value to set."
            },
            {
              "name": "timeZone",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "A time zone string used to constructjava.lang.Calendarinstance, which in turn is used to build the date. Several formats\n    of time zone strings are recognized: short IDs (such asPST,EST, andGMT), long IDs (such asUS/PacificandAmerica/Los_Angeles), and\n    offsets (such asGMT+6:30)."
            }
          ],
          "name": "setTimestamp(parameterIndex, x, timeZone)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setTimestamp(int, Timestamp, Calendar).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter to set."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcTimestamp",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-timestamp"
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setTimestamp(parameterName, x)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#setTimestamp(String, Timestamp).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter to set."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcTimestamp",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-timestamp"
              },
              "description": "The parameter value to set."
            },
            {
              "name": "timeZone",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "A time zone string used to constructjava.lang.Calendarinstance, which in turn is used to build the date. Several formats\n    of time zone strings are recognized: short IDs (such asPST,EST, andGMT), long IDs (such asUS/PacificandAmerica/Los_Angeles), and\n    offsets (such asGMT+6:30)."
            }
          ],
          "name": "setTimestamp(parameterName, x, timeZone)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#setTimestamp(String, Timestamp, Calendar).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setURL(parameterIndex, x)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setURL(int, URL).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parameter to set."
            },
            {
              "name": "val",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setURL(parameterName, val)",
          "description": "For documentation of this method, seejava.sql.CallableStatement#setURL(String, URL).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "wasNull()",
          "description": "For documentation of this method, seejava.sql.CallableStatement#wasNull().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        }
      ]
    },
    {
      "name": "Class JdbcClob",
      "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-clob",
      "description": "",
      "methods": [
        {
          "parameters": [],
          "name": "free()",
          "description": "For documentation of this method, seejava.sql.Clob#truncate(long).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getAppsScriptBlob()",
          "description": "Gets the content of this JdbcClob as an Apps Script blob.",
          "return_type": {
            "name": "Blob",
            "url": "https://developers.google.com/apps-script/reference/base/blob.html"
          }
        },
        {
          "parameters": [
            {
              "name": "contentType",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The MIME type to convert to. For most blobs,'application/pdf'is\n    the only valid option. For images in BMP, GIF, JPEG, or PNG format, any of'image/bmp','image/gif','image/jpeg', or'image/png'are also\n    valid. For a Google Docs document,'text/markdown'is also valid."
            }
          ],
          "name": "getAs(contentType)",
          "description": "Return the data inside this object as a blob converted to the specified content type. This\nmethod adds the appropriate extension to the filename—for example, \"myfile.pdf\". However, it\nassumes that the part of the filename that follows the last period (if any) is an existing\nextension that should be replaced. Consequently, \"ShoppingList.12.25.2014\" becomes\n\"ShoppingList.12.25.pdf\".",
          "return_type": {
            "name": "Blob",
            "url": "https://developers.google.com/apps-script/reference/base/blob.html"
          }
        },
        {
          "parameters": [
            {
              "name": "position",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the first character of the substring to extract. The first\n    character is at index 1."
            },
            {
              "name": "length",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The number of consecutive characters to copy (must be 0 or greater)."
            }
          ],
          "name": "getSubString(position, length)",
          "description": "For documentation of this method, seejava.sql.Clob#getSubString(long, int).",
          "return_type": {
            "name": "String",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "length()",
          "description": "For documentation of this method, seejava.sql.Clob#length().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "search",
              "type": {
                "name": "JdbcClob",
                "url": "https://developers.google.com/apps-script/reference"
              },
              "description": "The clob object to search for."
            },
            {
              "name": "start",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The position at which to begin searching; the first position is 1."
            }
          ],
          "name": "position(search, start)",
          "description": "For documentation of this method, seejava.sql.Clob#position(Clob, long).",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "search",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The substring to search for."
            },
            {
              "name": "start",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The position at which to begin searching; the first position is 1."
            }
          ],
          "name": "position(search, start)",
          "description": "For documentation of this method, seejava.sql.Clob#position(String, long).",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "position",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The position at which writing to the clob starts; the first position is 1."
            },
            {
              "name": "blobSource",
              "type": {
                "name": "BlobSource",
                "url": "https://developers.google.com/apps-script/reference/base/blob-source.html"
              },
              "description": "The blob source to write."
            }
          ],
          "name": "setString(position, blobSource)",
          "description": "Convenience method for writing aJdbcClobto a clob.",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "position",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The position at which writing to the clob starts; the first position is 1."
            },
            {
              "name": "blobSource",
              "type": {
                "name": "BlobSource",
                "url": "https://developers.google.com/apps-script/reference/base/blob-source.html"
              },
              "description": "The blob source to write."
            },
            {
              "name": "offset",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The offset into the provided string where reading characters to write starts."
            },
            {
              "name": "len",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The number of characters to write."
            }
          ],
          "name": "setString(position, blobSource, offset, len)",
          "description": "Convenience method for writing aJdbcClobto a clob.",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "position",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The position at which writing to the clob starts; the first position is 1."
            },
            {
              "name": "value",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The string to write."
            }
          ],
          "name": "setString(position, value)",
          "description": "For documentation of this method, seejava.sql.Clob#setString(long, String).",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "position",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The position at which writing to the clob starts; the first position is 1."
            },
            {
              "name": "value",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The string to write."
            },
            {
              "name": "offset",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The offset into the provided string where reading characters to write starts."
            },
            {
              "name": "len",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The number of characters to write."
            }
          ],
          "name": "setString(position, value, offset, len)",
          "description": "For documentation of this method, seejava.sql.Clob#setString(long, String, int, int).",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "length",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The size (in bytes) of this clob after truncation."
            }
          ],
          "name": "truncate(length)",
          "description": "For documentation of this method, seejava.sql.Clob#truncate(long).",
          "return_type": {
            "name": "void",
            "url": null
          }
        }
      ]
    },
    {
      "name": "Class JdbcConnection",
      "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-connection",
      "description": "",
      "methods": [
        {
          "parameters": [],
          "name": "clearWarnings()",
          "description": "For documentation of this method, seejava.sql.Connection#clearWarnings().",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "close()",
          "description": "Release this connection's database and all associated resources.",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "commit()",
          "description": "Makes all pending changes permanent, releases database locks held by thisJdbcConnection.",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "typeName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The database-specific SQL name of the array elemnents' type. Options include\n    built-in types, user-defined types, or standard SQL types supported by the database."
            },
            {
              "name": "elements",
              "type": {
                "name": "Object[]",
                "url": null
              },
              "description": "The elements to populate in the returned object."
            }
          ],
          "name": "createArrayOf(typeName, elements)",
          "description": "For documentation of this method, seejava.sql.Connection#createArrayOf(String, Object[]).",
          "return_type": {
            "name": "JdbcArray",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-array"
          }
        },
        {
          "parameters": [],
          "name": "createBlob()",
          "description": "Constructs aJdbcBlobinstance. See alsojava.sql.Connection#createBlob().",
          "return_type": {
            "name": "JdbcBlob",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-blob"
          }
        },
        {
          "parameters": [],
          "name": "createClob()",
          "description": "For documentation of this method, seejava.sql.Connection#createClob().",
          "return_type": {
            "name": "JdbcClob",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-clob"
          }
        },
        {
          "parameters": [],
          "name": "createNClob()",
          "description": "For documentation of this method, seejava.sql.Connection#createNClob().",
          "return_type": {
            "name": "JdbcClob",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-clob"
          }
        },
        {
          "parameters": [],
          "name": "createSQLXML()",
          "description": "For documentation of this method, seejava.sql.Connection#createSQLXML().",
          "return_type": {
            "name": "JdbcSQLXML",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-sqlxml"
          }
        },
        {
          "parameters": [],
          "name": "createStatement()",
          "description": "Creates aJdbcStatementobject for sending SQL statements to the database. See alsojava.sql.Connection#createStatement().",
          "return_type": {
            "name": "JdbcStatement",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-statement"
          }
        },
        {
          "parameters": [
            {
              "name": "resultSetType",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "A result set type; one ofJdbc.ResultSet.TYPE_FORWARD_ONLY,Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE, orJdbc.ResultSet.TYPE_SCROLL_SENSITIVE."
            },
            {
              "name": "resultSetConcurrency",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "A concurrency type; eitherJdbc.ResultSet.CONCUR_READ_ONLYorJdbc.ResultSet.CONCUR_UPDATABLE."
            }
          ],
          "name": "createStatement(resultSetType, resultSetConcurrency)",
          "description": "Creates aJdbcStatementobject for sending SQL statements to the database. See alsojava.sql.Connection#createStatement(int, int).",
          "return_type": {
            "name": "JdbcStatement",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-statement"
          }
        },
        {
          "parameters": [
            {
              "name": "resultSetType",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "A result set type; one ofJdbc.ResultSet.TYPE_FORWARD_ONLY,Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE, orJdbc.ResultSet.TYPE_SCROLL_SENSITIVE."
            },
            {
              "name": "resultSetConcurrency",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "A concurrency type; eitherJdbc.ResultSet.CONCUR_READ_ONLYorJdbc.ResultSet.CONCUR_UPDATABLE."
            },
            {
              "name": "resultSetHoldability",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "A holdability setting; eitherJdbc.ResultSet.HOLD_CURSORS_OVER_COMMITorJdbc.ResultSet.CLOSE_CURSORS_AT_COMMIT."
            }
          ],
          "name": "createStatement(resultSetType, resultSetConcurrency, resultSetHoldability)",
          "description": "Creates aJdbcStatementobject for sending SQL statements to the database. See alsojava.sql.Connection#createStatement(int, int, int).",
          "return_type": {
            "name": "JdbcStatement",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-statement"
          }
        },
        {
          "parameters": [
            {
              "name": "typeName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The database-specific SQL name of the array elemnents' type. Options include\n    built-in types, user-defined types, or standard SQL types supported by the database."
            },
            {
              "name": "attributes",
              "type": {
                "name": "Object[]",
                "url": null
              },
              "description": "The attributes that populate the returned object."
            }
          ],
          "name": "createStruct(typeName, attributes)",
          "description": "For documentation of this method, seejava.sql.Connection#createStruct(String, Object[]).",
          "return_type": {
            "name": "JdbcStruct",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-struct"
          }
        },
        {
          "parameters": [],
          "name": "getAutoCommit()",
          "description": "For documentation of this method, seejava.sql.Connection#getAutoCommit().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getCatalog()",
          "description": "or documentation of this method, seejava.sql.Connection#getCatalog().",
          "return_type": {
            "name": "String",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getHoldability()",
          "description": "For documentation of this method, seejava.sql.Connection#getHoldability().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getMetaData()",
          "description": "For documentation of this method, seejava.sql.Connection#getMetaData().",
          "return_type": {
            "name": "JdbcDatabaseMetaData",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-database-meta-data"
          }
        },
        {
          "parameters": [],
          "name": "getTransactionIsolation()",
          "description": "For documentation of this method, seejava.sql.Connection#getTransactionIsolation().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getWarnings()",
          "description": "For documentation of this method, seejava.sql.Connection#getWarnings().",
          "return_type": {
            "name": "String[]",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "isClosed()",
          "description": "For documentation of this method, seejava.sql.Connection#isClosed().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "isReadOnly()",
          "description": "For documentation of this method, seejava.sql.Connection#isReadOnly().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "timeout",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The time in seconds to wait for the validation operation to complete. A value of\n    0 indicates no timeout is applied."
            }
          ],
          "name": "isValid(timeout)",
          "description": "For documentation of this method, seejava.sql.Connection#isValid(int).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "sql",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "An SQL statement that may contain one more more '?' placeholders."
            }
          ],
          "name": "nativeSQL(sql)",
          "description": "For documentation of this method, seejava.sql.Connection#nativeSQL(String).",
          "return_type": {
            "name": "String",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "sql",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "An SQL statement that may contain one more more '?' placeholders, typically provided\n    using JDBC call escape syntax."
            }
          ],
          "name": "prepareCall(sql)",
          "description": "For documentation of this method, seejava.sql.Connection#prepareCall(String).",
          "return_type": {
            "name": "JdbcCallableStatement",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-callable-statement"
          }
        },
        {
          "parameters": [
            {
              "name": "sql",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "An SQL statement that may contain one more more '?' placeholders, typically provided\n    using JDBC call escape syntax."
            },
            {
              "name": "resultSetType",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "A result set type; one ofJdbc.ResultSet.TYPE_FORWARD_ONLY,Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE, orJdbc.ResultSet.TYPE_SCROLL_SENSITIVE."
            },
            {
              "name": "resultSetConcurrency",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "A concurrency type; eitherJdbc.ResultSet.CONCUR_READ_ONLYorJdbc.ResultSet.CONCUR_UPDATABLE."
            }
          ],
          "name": "prepareCall(sql, resultSetType, resultSetConcurrency)",
          "description": "For documentation of this method, seejava.sql.Connection#prepareCall(String, int, int).",
          "return_type": {
            "name": "JdbcCallableStatement",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-callable-statement"
          }
        },
        {
          "parameters": [
            {
              "name": "sql",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "An SQL statement that may contain one more more '?' placeholders, typically provided\n    using JDBC call escape syntax."
            },
            {
              "name": "resultSetType",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "A result set type; one ofJdbc.ResultSet.TYPE_FORWARD_ONLY,Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE, orJdbc.ResultSet.TYPE_SCROLL_SENSITIVE."
            },
            {
              "name": "resultSetConcurrency",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "A concurrency type; eitherJdbc.ResultSet.CONCUR_READ_ONLYorJdbc.ResultSet.CONCUR_UPDATABLE."
            },
            {
              "name": "resultSetHoldability",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "A holdability setting; eitherJdbc.ResultSet.HOLD_CURSORS_OVER_COMMITorJdbc.ResultSet.CLOSE_CURSORS_AT_COMMIT."
            }
          ],
          "name": "prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability)",
          "description": "For documentation of this method, seejava.sql.Connection#prepareCall(String, int, int, int).",
          "return_type": {
            "name": "JdbcCallableStatement",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-callable-statement"
          }
        },
        {
          "parameters": [
            {
              "name": "sql",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "An SQL statement that may contain one more more '?' IN parameter placeholders."
            }
          ],
          "name": "prepareStatement(sql)",
          "description": "For documentation of this method, seejava.sql.Connection#prepareStatement(String).",
          "return_type": {
            "name": "JdbcPreparedStatement",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-prepared-statement"
          }
        },
        {
          "parameters": [
            {
              "name": "sql",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "An SQL statement that may contain one more more '?' IN parameter placeholders."
            },
            {
              "name": "autoGeneratedKeys",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "A flag that indicates whether auto-generated keys are returned; eitherJdbc.Statement.RETURN_GENERATED_KEYSorJdbc.Statement.NO_GENERATED_KEYS."
            }
          ],
          "name": "prepareStatement(sql, autoGeneratedKeys)",
          "description": "For documentation of this method, seejava.sql.Connection#prepareStatement(String, int).",
          "return_type": {
            "name": "JdbcPreparedStatement",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-prepared-statement"
          }
        },
        {
          "parameters": [
            {
              "name": "sql",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "An SQL statement that may contain one more more '?' IN parameter placeholders."
            },
            {
              "name": "resultSetType",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "A result set type; one ofJdbc.ResultSet.TYPE_FORWARD_ONLY,Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE, orJdbc.ResultSet.TYPE_SCROLL_SENSITIVE."
            },
            {
              "name": "resultSetConcurrency",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "A concurrency type; eitherJdbc.ResultSet.CONCUR_READ_ONLYorJdbc.ResultSet.CONCUR_UPDATABLE."
            }
          ],
          "name": "prepareStatement(sql, resultSetType, resultSetConcurrency)",
          "description": "For documentation of this method, seejava.sql.Connection#prepareStatement(String, int, int).",
          "return_type": {
            "name": "JdbcPreparedStatement",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-prepared-statement"
          }
        },
        {
          "parameters": [
            {
              "name": "sql",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "An SQL statement that may contain one more more '?' IN parameter placeholders."
            },
            {
              "name": "resultSetType",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "A result set type; one ofJdbc.ResultSet.TYPE_FORWARD_ONLY,Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE, orJdbc.ResultSet.TYPE_SCROLL_SENSITIVE."
            },
            {
              "name": "resultSetConcurrency",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "A concurrency type; eitherJdbc.ResultSet.CONCUR_READ_ONLYorJdbc.ResultSet.CONCUR_UPDATABLE."
            },
            {
              "name": "resultSetHoldability",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "A holdability setting; eitherJdbc.ResultSet.HOLD_CURSORS_OVER_COMMITorJdbc.ResultSet.CLOSE_CURSORS_AT_COMMIT."
            }
          ],
          "name": "prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability)",
          "description": "For documentation of this method, seejava.sql.Connection#prepareStatement(String, int, int, int).",
          "return_type": {
            "name": "JdbcPreparedStatement",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-prepared-statement"
          }
        },
        {
          "parameters": [
            {
              "name": "sql",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "An SQL statement that may contain one more more '?' IN parameter placeholders."
            },
            {
              "name": "indices",
              "type": {
                "name": "Integer[]",
                "url": null
              },
              "description": "The column indices of columns that are returned from the inserted row or rows."
            }
          ],
          "name": "prepareStatementByIndex(sql, indices)",
          "description": "For documentation of this method, seejava.sql.Connection#prepareStatement(String, int[]).",
          "return_type": {
            "name": "JdbcPreparedStatement",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-prepared-statement"
          }
        },
        {
          "parameters": [
            {
              "name": "sql",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "An SQL statement that may contain one more more '?' IN parameter placeholders."
            },
            {
              "name": "columnNames",
              "type": {
                "name": "String[]",
                "url": null
              },
              "description": "The column names that specify which columns the method should return from\n    the inserted row or rows."
            }
          ],
          "name": "prepareStatementByName(sql, columnNames)",
          "description": "For documentation of this method, seejava.sql.Connection#prepareStatement(String, String[]).",
          "return_type": {
            "name": "JdbcPreparedStatement",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-prepared-statement"
          }
        },
        {
          "parameters": [
            {
              "name": "savepoint",
              "type": {
                "name": "JdbcSavepoint",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-savepoint"
              },
              "description": "The save point to remove."
            }
          ],
          "name": "releaseSavepoint(savepoint)",
          "description": "For documentation of this method, seejava.sql.Connection#releaseSavepoint(Savepoint).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "rollback()",
          "description": "For documentation of this method, seejava.sql.Connection#rollback().",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "savepoint",
              "type": {
                "name": "JdbcSavepoint",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-savepoint"
              },
              "description": "The save point to rollback to."
            }
          ],
          "name": "rollback(savepoint)",
          "description": "For documentation of this method, seejava.sql.Connection#rollback(Savepoint).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "autoCommit",
              "type": {
                "name": "Boolean",
                "url": null
              },
              "description": "Iftrue, auto-commit mode is enabled;falsedisables."
            }
          ],
          "name": "setAutoCommit(autoCommit)",
          "description": "For documentation of this method, seejava.sql.Connection#setAutoCommit(boolean).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "catalog",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of a catalog (the subspace in the connection's database) in which to\n    work."
            }
          ],
          "name": "setCatalog(catalog)",
          "description": "For documentation of this method, seejava.sql.Connection#setCatalog(String).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "holdability",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The default holdability ofJdbcResultSetobjects created with this\n    connection; eitherJdbc.ResultSet.HOLD_CURSORS_OVER_COMMITorJdbc.ResultSet.CLOSE_CURSORS_AT_COMMIT."
            }
          ],
          "name": "setHoldability(holdability)",
          "description": "For documentation of this method, seejava.sql.Connection#setHoldability(int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "readOnly",
              "type": {
                "name": "Boolean",
                "url": null
              },
              "description": "Iftrue, read-only mode is enabled;falsedisables."
            }
          ],
          "name": "setReadOnly(readOnly)",
          "description": "For documentation of this method, seejava.sql.Connection#setReadOnly(boolean).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "setSavepoint()",
          "description": "For documentation of this method, seejava.sql.Connection#setSavepoint().",
          "return_type": {
            "name": "JdbcSavepoint",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-savepoint"
          }
        },
        {
          "parameters": [
            {
              "name": "name",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the created save point."
            }
          ],
          "name": "setSavepoint(name)",
          "description": "For documentation of this method, seejava.sql.Connection#setSavepoint(String).",
          "return_type": {
            "name": "JdbcSavepoint",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-savepoint"
          }
        },
        {
          "parameters": [
            {
              "name": "level",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The transaction level to set, which is one of:Jdbc.Connection.TRANSACTION_READ_UNCOMMITTED,Jdbc.Connection.TRANSACTION_READ_COMMITTED,Jdbc.Connection.TRANSACTION_REPEATABLE_READ,Jdbc.Connection.TRANSACTION_SERIALIZABLE, orJdbc.Connection.TRANSACTION_NONE."
            }
          ],
          "name": "setTransactionIsolation(level)",
          "description": "For documentation of this method, seejava.sql.Connection#setTransactionIsolation(int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        }
      ]
    },
    {
      "name": "Class JdbcDatabaseMetaData",
      "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-database-meta-data",
      "description": "",
      "methods": [
        {
          "parameters": [],
          "name": "allProceduresAreCallable()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#allProceduresAreCallable().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "allTablesAreSelectable()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#allTablesAreSelectable().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "autoCommitFailureClosesAllResultSets()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#autoCommitFailureClosesAllResultSets().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "dataDefinitionCausesTransactionCommit()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#dataDefinitionCausesTransactionCommit().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "dataDefinitionIgnoredInTransactions()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#dataDefinitionIgnoredInTransactions().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "type",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The result set type, which isJdbc.ResultSet.TYPE_FORWARD_ONLY,Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE, orJdbc.ResultSet.TYPE_SCROLL_INSENSITIVE."
            }
          ],
          "name": "deletesAreDetected(type)",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#deletesAreDetected(int).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "doesMaxRowSizeIncludeBlobs()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#doesMaxRowSizeIncludeBlobs().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "catalog",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The catalog name to filter the search by, as it appears in the database. Passing\n    an empty string retrieves those procedures without a catalog. Passingnullincidates the catalog name isn't used to narrow the search."
            },
            {
              "name": "schemaPattern",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The schema name pattern to filter the search by, as it appears in the\n    database. Passing an empty string retrieves those procedures without a schema. Passingnullincidates the schema name isn't used to narrow the search."
            },
            {
              "name": "typeNamePattern",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The user-defined type name pattern; it must match the type name as it is\n    stored in the database."
            },
            {
              "name": "attributeNamePattern",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The attribute name pattern; it must match the attribute name as it\n    is declared in the database."
            }
          ],
          "name": "getAttributes(catalog, schemaPattern, typeNamePattern, attributeNamePattern)",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getAttributes(String, String, String, String).",
          "return_type": {
            "name": "JdbcResultSet",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-result-set"
          }
        },
        {
          "parameters": [
            {
              "name": "catalog",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The catalog name to filter the search by, as it appears in the database. Passing\n    an empty string retrieves those procedures without a catalog. Passingnullincidates the catalog name isn't used to narrow the search."
            },
            {
              "name": "schema",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The schema name to filter the search by, as it appears in the database. Passing\n    an empty string retrieves those procedures without a schema. Passingnullincidates\n    the schema name isn't used to narrow the search."
            },
            {
              "name": "table",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The table name. It must match the table name as it is stored in the database."
            },
            {
              "name": "scope",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The scope of interest, using the same values as present in theSCOPEcolumn description column."
            },
            {
              "name": "nullable",
              "type": {
                "name": "Boolean",
                "url": null
              },
              "description": "Iftrue, include columns that are nullable; otherwise do not."
            }
          ],
          "name": "getBestRowIdentifier(catalog, schema, table, scope, nullable)",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getBestRowIdentifier(String, String, String, int, boolean).",
          "return_type": {
            "name": "JdbcResultSet",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-result-set"
          }
        },
        {
          "parameters": [],
          "name": "getCatalogSeparator()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getCatalogSeparator().",
          "return_type": {
            "name": "String",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getCatalogTerm()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getCatalogTerm().",
          "return_type": {
            "name": "String",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getCatalogs()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getCatalogs().",
          "return_type": {
            "name": "JdbcResultSet",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-result-set"
          }
        },
        {
          "parameters": [],
          "name": "getClientInfoProperties()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getClientInfoProperties().",
          "return_type": {
            "name": "JdbcResultSet",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-result-set"
          }
        },
        {
          "parameters": [
            {
              "name": "catalog",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The catalog name to filter the search by, as it appears in the database. Passing\n    an empty string retrieves those procedures without a catalog. Passingnullincidates the catalog name isn't used to narrow the search."
            },
            {
              "name": "schema",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the schema to filter the search by, as it appears in the database.\n    Passing an empty string retrieves those procedures without a schema. Passingnullincidates the schema name isn't used to narrow the search."
            },
            {
              "name": "table",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The table name. It must match the table name as it is stored in the database."
            },
            {
              "name": "columnNamePattern",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The column name pattern to filter the search by. It must match the\n    column name as it is stored in the database."
            }
          ],
          "name": "getColumnPrivileges(catalog, schema, table, columnNamePattern)",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getColumnPrivileges(String, String, String, String).",
          "return_type": {
            "name": "JdbcResultSet",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-result-set"
          }
        },
        {
          "parameters": [
            {
              "name": "catalog",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The catalog name to filter the search by, as it appears in the database. Passing\n    an empty string retrieves those procedures without a catalog. Passingnullincidates the catalog name isn't used to narrow the search."
            },
            {
              "name": "schemaPattern",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The schema name pattern to filter the search by, as it appears in the\n    database. Passing an empty string retrieves those procedures without a schema. Passingnullincidates the schema name isn't used to narrow the search."
            },
            {
              "name": "tableNamePattern",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The table name pattern to filter the search by. It must match the table\n    name as it is stored in the database."
            },
            {
              "name": "columnNamePattern",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The column name pattern to filter the search by. It must match the\n    column name as it is stored in the database."
            }
          ],
          "name": "getColumns(catalog, schemaPattern, tableNamePattern, columnNamePattern)",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getColumns(String, String, String, String).",
          "return_type": {
            "name": "JdbcResultSet",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-result-set"
          }
        },
        {
          "parameters": [],
          "name": "getConnection()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getConnection().",
          "return_type": {
            "name": "JdbcConnection",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-connection"
          }
        },
        {
          "parameters": [
            {
              "name": "parentCatalog",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "A parent catalog name as it appears in the database. Passing an empty\n    string retrieves those procedures without a catalog. Passingnullincidates the\n    catalog name isn't used in the selection criteria."
            },
            {
              "name": "parentSchema",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "A parent schema name as it appears in the database. Passing an empty string\n    retrieves those procedures without a schema. Passingnullincidates the schema name\n    isn't used in the selection criteria."
            },
            {
              "name": "parentTable",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the parent table that exports the key. It must match the table\n    name as it is stored in the database."
            },
            {
              "name": "foreignCatalog",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "A foreign catalog name as it appears in the database. Passing an empty\n    string retrieves those procedures without a catalog. Passingnullincidates the\n    catalog name isn't used in the selection criteria."
            },
            {
              "name": "foreignSchema",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "A foreign schema name as it appears in the database. Passing an empty\n    string retrieves those procedures without a schema. Passingnullincidates the\n    schema name isn't used in the selection criteria."
            },
            {
              "name": "foreignTable",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The name of the foreign table that exports the key. It must match the table\n    name as it is stored in the database."
            }
          ],
          "name": "getCrossReference(parentCatalog, parentSchema, parentTable, foreignCatalog, foreignSchema, foreignTable)",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getCrossReference(String, String, String,\n     String, String, String).",
          "return_type": {
            "name": "JdbcResultSet",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-result-set"
          }
        },
        {
          "parameters": [],
          "name": "getDatabaseMajorVersion()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getDatabaseMajorVersion().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getDatabaseMinorVersion()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getDatabaseMinorVersion().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getDatabaseProductName()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getDatabaseProductName().",
          "return_type": {
            "name": "String",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getDatabaseProductVersion()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getDatabaseProductVersion().",
          "return_type": {
            "name": "String",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getDefaultTransactionIsolation()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getDefaultTransactionIsolation().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getDriverMajorVersion()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getDriverMajorVersion().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getDriverMinorVersion()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getDriverMinorVersion().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getDriverName()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getDriverName().",
          "return_type": {
            "name": "String",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getDriverVersion()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getDriverVersion().",
          "return_type": {
            "name": "String",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "catalog",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The catalog name to filter the search by, as it appears in the database. Passing\n    an empty string retrieves those procedures without a catalog. Passingnullincidates the catalog name isn't used to narrow the search."
            },
            {
              "name": "schema",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The schema name to filter the search by, as it appears in the database. Passing\n    an empty string retrieves those procedures without a schema. Passingnullincidates\n    the schema name isn't used to narrow the search."
            },
            {
              "name": "table",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The table name. It must match the table name as it is stored in the database."
            }
          ],
          "name": "getExportedKeys(catalog, schema, table)",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getImportedKeys(String, String, String).",
          "return_type": {
            "name": "JdbcResultSet",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-result-set"
          }
        },
        {
          "parameters": [],
          "name": "getExtraNameCharacters()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getExtraNameCharacters().",
          "return_type": {
            "name": "String",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "catalog",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The catalog name to filter the search by, as it appears in the database. Passing\n    an empty string retrieves those procedures without a catalog. Passingnullincidates the catalog name isn't used to narrow the search."
            },
            {
              "name": "schemaPattern",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The schema name pattern to filter the search by, as it appears in the\n    database. Passing an empty string retrieves those procedures without a schema. Passingnullincidates the schema name isn't used to narrow the search."
            },
            {
              "name": "functionNamePattern",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The function pattern, which match the function name as it is stored\n    in the database."
            },
            {
              "name": "columnNamePattern",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The parameter name pattern, which must match the parameter or column\n    name as it is stored in the database."
            }
          ],
          "name": "getFunctionColumns(catalog, schemaPattern, functionNamePattern, columnNamePattern)",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getFunctionColumns(String, String, String, String).",
          "return_type": {
            "name": "JdbcResultSet",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-result-set"
          }
        },
        {
          "parameters": [
            {
              "name": "catalog",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The catalog name to filter the search by, as it appears in the database. Passing\n    an empty string retrieves those procedures without a catalog. Passingnullincidates the catalog name isn't used to narrow the search."
            },
            {
              "name": "schemaPattern",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The schema name pattern to filter the search by, as it appears in the\n    database. Passing an empty string retrieves those procedures without a schema. Passingnullincidates the schema name isn't used to narrow the search."
            },
            {
              "name": "functionNamePattern",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The function pattern, which must match the function name as it is\n    stored in the database."
            }
          ],
          "name": "getFunctions(catalog, schemaPattern, functionNamePattern)",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getFunctions(String, String, String).",
          "return_type": {
            "name": "JdbcResultSet",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-result-set"
          }
        },
        {
          "parameters": [],
          "name": "getIdentifierQuoteString()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getIdentifierQuoteString().",
          "return_type": {
            "name": "String",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "catalog",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The catalog name to filter the search by, as it appears in the database. Passing\n    an empty string retrieves those procedures without a catalog. Passingnullincidates the catalog name isn't used to narrow the search."
            },
            {
              "name": "schema",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The schema name to filter the search by, as it appears in the database. Passing\n    an empty string retrieves those procedures without a schema. Passingnullincidates\n    the schema name isn't used to narrow the search."
            },
            {
              "name": "table",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The table name. It must match the table name as it is stored in the database."
            }
          ],
          "name": "getImportedKeys(catalog, schema, table)",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getImportedKeys(String, String, String).",
          "return_type": {
            "name": "JdbcResultSet",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-result-set"
          }
        },
        {
          "parameters": [
            {
              "name": "catalog",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The catalog name to filter the search by, as it appears in the database. Passing\n    an empty string retrieves those procedures without a catalog. Passingnullincidates the catalog name isn't used to narrow the search."
            },
            {
              "name": "schema",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The schema name to filter the search by, as it appears in the database. Passing\n    an empty string retrieves those procedures without a schema. Passingnullincidates\n    the schema name isn't used to narrow the search."
            },
            {
              "name": "table",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The table name. It must match the table name as it is stored in the database."
            },
            {
              "name": "unique",
              "type": {
                "name": "Boolean",
                "url": null
              },
              "description": "Iftrue, the method only return indices for unique values; otherwise it\n    returns indices whether the values are unique or not."
            },
            {
              "name": "approximate",
              "type": {
                "name": "Boolean",
                "url": null
              },
              "description": "Iftrue, the result is allowed to reflect approximate or out-of-data\n    values; otherwise result accuracy is requested."
            }
          ],
          "name": "getIndexInfo(catalog, schema, table, unique, approximate)",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getIndexInfo(String, String, String, boolean, boolean).",
          "return_type": {
            "name": "JdbcResultSet",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-result-set"
          }
        },
        {
          "parameters": [],
          "name": "getJDBCMajorVersion()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getJDBCMajorVersion().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getJDBCMinorVersion()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getJDBCMinorVersion().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getMaxBinaryLiteralLength()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getMaxBinaryLiteralLength().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getMaxCatalogNameLength()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getMaxCatalogNameLength().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getMaxCharLiteralLength()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getMaxCharLiteralLength().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getMaxColumnNameLength()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getMaxColumnNameLength().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getMaxColumnsInGroupBy()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getMaxColumnsInGroupBy().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getMaxColumnsInIndex()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getMaxColumnsInIndex().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getMaxColumnsInOrderBy()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getMaxColumnsInOrderBy().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getMaxColumnsInSelect()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getMaxColumnsInSelect().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getMaxColumnsInTable()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getMaxColumnsInTable().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getMaxConnections()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getMaxConnections().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getMaxCursorNameLength()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getMaxCursorNameLength().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getMaxIndexLength()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getMaxIndexLength().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getMaxProcedureNameLength()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getMaxProcedureNameLength().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getMaxRowSize()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getMaxRowSize().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getMaxSchemaNameLength()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getMaxSchemaNameLength().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getMaxStatementLength()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getMaxStatementLength().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getMaxStatements()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getMaxStatements().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getMaxTableNameLength()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getMaxTableNameLength().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getMaxTablesInSelect()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getMaxTablesInSelect().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getMaxUserNameLength()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getMaxUserNameLength().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getNumericFunctions()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getNumericFunctions().",
          "return_type": {
            "name": "String",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "catalog",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The catalog name to filter the search by, as it appears in the database. Passing\n    an empty string retrieves those procedures without a catalog. Passingnullincidates the catalog name isn't used to narrow the search."
            },
            {
              "name": "schema",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The schema name to filter the search by, as it appears in the database. Passing\n    an empty string retrieves those procedures without a schema. Passingnullincidates\n    the schema name isn't used to narrow the search."
            },
            {
              "name": "table",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The table name. It must match the table name as it is stored in the database."
            }
          ],
          "name": "getPrimaryKeys(catalog, schema, table)",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getPrimaryKeys(String, String, String).",
          "return_type": {
            "name": "JdbcResultSet",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-result-set"
          }
        },
        {
          "parameters": [
            {
              "name": "catalog",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The catalog name to filter the search by, as it appears in the database. Passing\n    an empty string retrieves those procedures without a catalog. Passingnullincidates the catalog name isn't used to narrow the search."
            },
            {
              "name": "schemaPattern",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The schema name pattern to filter the search by, as it appears in the\n    database. Passing an empty string retrieves those procedures without a schema. Passingnullincidates the schema name isn't used to narrow the search."
            },
            {
              "name": "procedureNamePattern",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The procedure name pattern to filter the search by. It must match\n    the procedure name as it is stored in the database."
            },
            {
              "name": "columnNamePattern",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The column name pattern to filter the search by. It must match the\n    column name as it is stored in the database."
            }
          ],
          "name": "getProcedureColumns(catalog, schemaPattern, procedureNamePattern, columnNamePattern)",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getProcedureColumns(String, String, String, String).",
          "return_type": {
            "name": "JdbcResultSet",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-result-set"
          }
        },
        {
          "parameters": [],
          "name": "getProcedureTerm()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getProcedureTerm().",
          "return_type": {
            "name": "String",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "catalog",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The catalog name to filter the search by, as it appears in the database. Passing\n    an empty string retrieves those procedures without a catalog. Passingnullincidates the catalog name isn't used to narrow the search."
            },
            {
              "name": "schemaPattern",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The schema name pattern to filter the search by, as it appears in the\n    database. Passing an empty string retrieves those procedures without a schema. Passingnullincidates the schema name isn't used to narrow the search."
            },
            {
              "name": "procedureNamePattern",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The procedure name pattern to filter the search by. It must match\n    the procedure name as it is stored in the database."
            }
          ],
          "name": "getProcedures(catalog, schemaPattern, procedureNamePattern)",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getProcedures(String, String, String).",
          "return_type": {
            "name": "JdbcResultSet",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-result-set"
          }
        },
        {
          "parameters": [],
          "name": "getResultSetHoldability()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getResultSetHoldability().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getRowIdLifetime()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getRowIdLifetime().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getSQLKeywords()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getSQLKeywords().",
          "return_type": {
            "name": "String",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getSQLStateType()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getSQLStateType().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getSchemaTerm()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getSchemaTerm().",
          "return_type": {
            "name": "String",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getSchemas()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getSchemas().",
          "return_type": {
            "name": "JdbcResultSet",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-result-set"
          }
        },
        {
          "parameters": [
            {
              "name": "catalog",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The catalog name to filter the search by, as it appears in the database. Passing\n    an empty string retrieves those procedures without a catalog. Passingnullincidates the catalog name isn't used to narrow the search."
            },
            {
              "name": "schemaPattern",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The schema name pattern to filter the search by, as it appears in the\n    database. Passing an empty string retrieves those procedures without a schema. Passingnullincidates the schema name isn't used to narrow the search."
            }
          ],
          "name": "getSchemas(catalog, schemaPattern)",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getSchemas().",
          "return_type": {
            "name": "JdbcResultSet",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-result-set"
          }
        },
        {
          "parameters": [],
          "name": "getSearchStringEscape()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getSearchStringEscape().",
          "return_type": {
            "name": "String",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getStringFunctions()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getStringFunctions().",
          "return_type": {
            "name": "String",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "catalog",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The catalog name as it appears in the database. Passing an empty string\n    retrieves those procedures without a catalog. Passingnullincidates the catalog\n    name isn't used in the selection criteria."
            },
            {
              "name": "schemaPattern",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The schema name pattern to filter the search by, as it appears in the\n    database. Passing an empty string retrieves those procedures without a schema."
            },
            {
              "name": "tableNamePattern",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The table name pattern; may be a fully qualified name."
            }
          ],
          "name": "getSuperTables(catalog, schemaPattern, tableNamePattern)",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getSuperTables(String, String,String).",
          "return_type": {
            "name": "JdbcResultSet",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-result-set"
          }
        },
        {
          "parameters": [
            {
              "name": "catalog",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The catalog name as it appears in the database. Passing an empty string\n    retrieves those procedures without a catalog. Passingnullincidates the catalog\n    name isn't used in the selection criteria."
            },
            {
              "name": "schemaPattern",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The schema name pattern to filter the search by, as it appears in the\n    database. Passing an empty string retrieves those procedures without a schema."
            },
            {
              "name": "typeNamePattern",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The user-defined type name pattern; may be a fully qualified name."
            }
          ],
          "name": "getSuperTypes(catalog, schemaPattern, typeNamePattern)",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getSuperTypes(String, String, String).",
          "return_type": {
            "name": "JdbcResultSet",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-result-set"
          }
        },
        {
          "parameters": [],
          "name": "getSystemFunctions()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getSystemFunctions().",
          "return_type": {
            "name": "String",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "catalog",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The catalog name to filter the search by, as it appears in the database. Passing\n    an empty string retrieves those procedures without a catalog. Passingnullincidates the catalog name isn't used to narrow the search."
            },
            {
              "name": "schemaPattern",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The schema name pattern to filter the search by, as it appears in the\n    database. Passing an empty string retrieves those procedures without a schema. Passingnullincidates the schema name isn't used to narrow the search."
            },
            {
              "name": "tableNamePattern",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The table name pattern to filter the search by. It must match the table\n    name as it is stored in the database."
            }
          ],
          "name": "getTablePrivileges(catalog, schemaPattern, tableNamePattern)",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getTablePrivileges(String, String, String).",
          "return_type": {
            "name": "JdbcResultSet",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-result-set"
          }
        },
        {
          "parameters": [],
          "name": "getTableTypes()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getTableTypes().",
          "return_type": {
            "name": "JdbcResultSet",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-result-set"
          }
        },
        {
          "parameters": [
            {
              "name": "catalog",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The catalog name to filter the search by, as it appears in the database. Passing\n    an empty string retrieves those procedures without a catalog. Passingnullincidates the catalog name isn't used to narrow the search."
            },
            {
              "name": "schemaPattern",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The schema name pattern to filter the search by, as it appears in the\n    database. Passing an empty string retrieves those procedures without a schema. Passingnullincidates the schema name isn't used to narrow the search."
            },
            {
              "name": "tableNamePattern",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The table name pattern to filter the search by. It must match the table\n    name as it is stored in the database."
            },
            {
              "name": "types",
              "type": {
                "name": "String[]",
                "url": null
              },
              "description": "A list of type types to return, each of which must be on the list thatgetTableTypes()returns. Passingnullindictates that all table types are\n    returned."
            }
          ],
          "name": "getTables(catalog, schemaPattern, tableNamePattern, types)",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getTables(String, String, String, String[]).",
          "return_type": {
            "name": "JdbcResultSet",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-result-set"
          }
        },
        {
          "parameters": [],
          "name": "getTimeDateFunctions()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getTimeDateFunctions().",
          "return_type": {
            "name": "String",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getTypeInfo()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getTypeInfo().",
          "return_type": {
            "name": "JdbcResultSet",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-result-set"
          }
        },
        {
          "parameters": [
            {
              "name": "catalog",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The catalog name to filter the search by, as it appears in the database. Passing\n    an empty string retrieves those procedures without a catalog. Passingnullincidates the catalog name isn't used to narrow the search."
            },
            {
              "name": "schemaPattern",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The schema name pattern to filter the search by, as it appears in the\n    database. Passing an empty string retrieves those procedures without a schema. Passingnullincidates the schema name isn't used to narrow the search."
            },
            {
              "name": "typeNamePattern",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The type name pattern to filter the search by; may be a fully qualified\n    name."
            },
            {
              "name": "types",
              "type": {
                "name": "Integer[]",
                "url": null
              },
              "description": "A list of user-defined types (JAVA_OBJECT,STRUCT, orDISTINCT) to include. Passingnullindictates that all types are returned."
            }
          ],
          "name": "getUDTs(catalog, schemaPattern, typeNamePattern, types)",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getUDTs(String, String, String, int[]).",
          "return_type": {
            "name": "JdbcResultSet",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-result-set"
          }
        },
        {
          "parameters": [],
          "name": "getURL()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getURL().",
          "return_type": {
            "name": "String",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getUserName()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getUserName().",
          "return_type": {
            "name": "String",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "catalog",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The catalog name to filter the search by, as it appears in the database. Passing\n    an empty string retrieves those procedures without a catalog. Passingnullincidates the catalog name isn't used to narrow the search."
            },
            {
              "name": "schema",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The schema name to filter the search by, as it appears in the database. Passing\n    an empty string retrieves those procedures without a schema. Passingnullincidates\n    the schema name isn't used to narrow the search."
            },
            {
              "name": "table",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The table name. It must match the table name as it is stored in the database."
            }
          ],
          "name": "getVersionColumns(catalog, schema, table)",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#getVersionColumns(String, String, String).",
          "return_type": {
            "name": "JdbcResultSet",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-result-set"
          }
        },
        {
          "parameters": [
            {
              "name": "type",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The result set type, which isJdbc.ResultSet.TYPE_FORWARD_ONLY,Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE, orJdbc.ResultSet.TYPE_SCROLL_INSENSITIVE."
            }
          ],
          "name": "insertsAreDetected(type)",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#insertsAreDetected(int).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "isCatalogAtStart()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#isCatalogAtStart().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "isReadOnly()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#isReadOnly().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "locatorsUpdateCopy()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#locatorsUpdateCopy().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "nullPlusNonNullIsNull()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#nullPlusNonNullIsNull().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "nullsAreSortedAtEnd()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#nullsAreSortedAtEnd().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "nullsAreSortedAtStart()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#nullsAreSortedAtStart().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "nullsAreSortedHigh()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#nullsAreSortedHigh().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "nullsAreSortedLow()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#nullsAreSortedLow().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "type",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The result set type, which isJdbc.ResultSet.TYPE_FORWARD_ONLY,Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE, orJdbc.ResultSet.TYPE_SCROLL_INSENSITIVE."
            }
          ],
          "name": "othersDeletesAreVisible(type)",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#othersDeletesAreVisible(int).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "type",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The result set type, which isJdbc.ResultSet.TYPE_FORWARD_ONLY,Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE, orJdbc.ResultSet.TYPE_SCROLL_INSENSITIVE."
            }
          ],
          "name": "othersInsertsAreVisible(type)",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#othersInsertsAreVisible(int).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "type",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The result set type, which isJdbc.ResultSet.TYPE_FORWARD_ONLY,Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE, orJdbc.ResultSet.TYPE_SCROLL_INSENSITIVE."
            }
          ],
          "name": "othersUpdatesAreVisible(type)",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#othersUpdatesAreVisible(int).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "type",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The result set type, which isJdbc.ResultSet.TYPE_FORWARD_ONLY,Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE, orJdbc.ResultSet.TYPE_SCROLL_INSENSITIVE."
            }
          ],
          "name": "ownDeletesAreVisible(type)",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#ownDeletesAreVisible(int).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "type",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The result set type, which isJdbc.ResultSet.TYPE_FORWARD_ONLY,Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE, orJdbc.ResultSet.TYPE_SCROLL_INSENSITIVE."
            }
          ],
          "name": "ownInsertsAreVisible(type)",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#ownInsertsAreVisible(int).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "type",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The result set type, which isJdbc.ResultSet.TYPE_FORWARD_ONLY,Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE, orJdbc.ResultSet.TYPE_SCROLL_INSENSITIVE."
            }
          ],
          "name": "ownUpdatesAreVisible(type)",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#ownUpdatesAreVisible(int).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "storesLowerCaseIdentifiers()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#storesLowerCaseIdentifiers().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "storesLowerCaseQuotedIdentifiers()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#storesLowerCaseQuotedIdentifiers().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "storesMixedCaseIdentifiers()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#storesMixedCaseIdentifiers().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "storesMixedCaseQuotedIdentifiers()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#storesMixedCaseQuotedIdentifiers().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "storesUpperCaseIdentifiers()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#storesUpperCaseIdentifiers().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "storesUpperCaseQuotedIdentifiers()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#storesUpperCaseQuotedIdentifiers().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsANSI92EntryLevelSQL()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsANSI92EntryLevelSQL().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsANSI92FullSQL()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsANSI92FullSQL().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsANSI92IntermediateSQL()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsANSI92IntermediateSQL().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsAlterTableWithAddColumn()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsAlterTableWithAddColumn().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsAlterTableWithDropColumn()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsAlterTableWithDropColumn().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsBatchUpdates()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsBatchUpdates().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsCatalogsInDataManipulation()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsCatalogsInDataManipulation().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsCatalogsInIndexDefinitions()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsCatalogsInIndexDefinitions().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsCatalogsInPrivilegeDefinitions()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsCatalogsInPrivilegeDefinitions().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsCatalogsInProcedureCalls()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsCatalogsInProcedureCalls().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsCatalogsInTableDefinitions()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsCatalogsInTableDefinitions().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsColumnAliasing()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsColumnAliasing().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsConvert()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsConvert().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "fromType",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "Thetypeto convert from."
            },
            {
              "name": "toType",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "Thetypeto convert to."
            }
          ],
          "name": "supportsConvert(fromType, toType)",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsConvert(int, int).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsCoreSQLGrammar()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsCoreSQLGrammar().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsCorrelatedSubqueries()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsCorrelatedSubqueries().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsDataDefinitionAndDataManipulationTransactions()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsDataDefinitionAndDataManipulationTransactions().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsDataManipulationTransactionsOnly()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsDataManipulationTransactionsOnly().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsDifferentTableCorrelationNames()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsDifferentTableCorrelationNames().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsExpressionsInOrderBy()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsExpressionsInOrderBy().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsExtendedSQLGrammar()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsExtendedSQLGrammar().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsFullOuterJoins()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsFullOuterJoins().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsGetGeneratedKeys()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsGetGeneratedKeys().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsGroupBy()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsGroupBy().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsGroupByBeyondSelect()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsGroupByBeyondSelect().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsGroupByUnrelated()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsGroupByUnrelated().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsIntegrityEnhancementFacility()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsIntegrityEnhancementFacility().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsLikeEscapeClause()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsLikeEscapeClause().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsLimitedOuterJoins()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsLimitedOuterJoins().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsMinimumSQLGrammar()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsMinimumSQLGrammar().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsMixedCaseIdentifiers()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsMixedCaseIdentifiers().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsMixedCaseQuotedIdentifiers()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsMixedCaseQuotedIdentifiers().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsMultipleOpenResults()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsMultipleOpenResults().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsMultipleResultSets()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsMultipleResultSets().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsMultipleTransactions()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsMultipleTransactions().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsNamedParameters()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsNamedParameters().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsNonNullableColumns()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsNonNullableColumns().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsOpenCursorsAcrossCommit()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsOpenCursorsAcrossCommit().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsOpenCursorsAcrossRollback()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsOpenCursorsAcrossRollback().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsOpenStatementsAcrossCommit()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsOpenStatementsAcrossCommit().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsOpenStatementsAcrossRollback()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsOpenStatementsAcrossRollback().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsOrderByUnrelated()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsOrderByUnrelated().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsOuterJoins()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsOuterJoins().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsPositionedDelete()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsPositionedDelete().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsPositionedUpdate()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsPositionedUpdate().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "type",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The result set type, which isJdbc.ResultSet.TYPE_FORWARD_ONLY,Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE, orJdbc.ResultSet.TYPE_SCROLL_INSENSITIVE."
            },
            {
              "name": "concurrency",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The concurrency type, which is eitherJdbc.ResultSet.CONCUR_READ_ONLYorJdbc.ResultSet.CONCUR_UPDATABLE."
            }
          ],
          "name": "supportsResultSetConcurrency(type, concurrency)",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsResultSetConcurrency(int, int).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "holdability",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "A holdability constant to check; one ofJdbc.ResultSet.HOLD_CURSORS_OVER_COMMITorJdbc.ResultSet.CLOSE_CURSORS_AT_COMMIT."
            }
          ],
          "name": "supportsResultSetHoldability(holdability)",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsResultSetHoldability(int).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "type",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The result set type, which isJdbc.ResultSet.TYPE_FORWARD_ONLY,Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE, orJdbc.ResultSet.TYPE_SCROLL_INSENSITIVE."
            }
          ],
          "name": "supportsResultSetType(type)",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsResultSetType(int).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsSavepoints()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsSavepoints().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsSchemasInDataManipulation()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsSchemasInDataManipulation().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsSchemasInIndexDefinitions()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsSchemasInIndexDefinitions().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsSchemasInPrivilegeDefinitions()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsSchemasInPrivilegeDefinitions().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsSchemasInProcedureCalls()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsSchemasInProcedureCalls().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsSchemasInTableDefinitions()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsSchemasInTableDefinitions().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsSelectForUpdate()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsSelectForUpdate().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsStatementPooling()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsStatementPooling().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsStoredFunctionsUsingCallSyntax()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsStoredFunctionsUsingCallSyntax().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsStoredProcedures()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsStoredProcedures().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsSubqueriesInComparisons()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsSubqueriesInComparisons().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsSubqueriesInExists()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsSubqueriesInExists().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsSubqueriesInIns()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsSubqueriesInIns().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsSubqueriesInQuantifieds()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsSubqueriesInQuantifieds().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsTableCorrelationNames()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsTableCorrelationNames().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "level",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The transaction isolation level to determine the support of. This must be one ofJdbc.Connection.TRANSACTION_READ_UNCOMMITTED,Jdbc.Connection.TRANSACTION_READ_COMMITTED,Jdbc.Connection.TRANSACTION_REPEATABLE_READ,Jdbc.Connection.TRANSACTION_SERIALIZABLE, orJdbc.Connection.TRANSACTION_NONE."
            }
          ],
          "name": "supportsTransactionIsolationLevel(level)",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsTransactionIsolationLevel(int).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsTransactions()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsTransactions().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsUnion()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsUnion().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "supportsUnionAll()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#supportsUnionAll().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "type",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The result set type, which isJdbc.ResultSet.TYPE_FORWARD_ONLY,Jdbc.ResultSet.TYPE_SCROLL_INSENSITIVE, orJdbc.ResultSet.TYPE_SCROLL_INSENSITIVE."
            }
          ],
          "name": "updatesAreDetected(type)",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#updatesAreDetected(int).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "usesLocalFilePerTable()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#usesLocalFilePerTable().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "usesLocalFiles()",
          "description": "For documentation of this method, seejava.sql.DatabaseMetaData#usesLocalFiles().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        }
      ]
    },
    {
      "name": "Class JdbcDate",
      "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-date",
      "description": "",
      "methods": [
        {
          "parameters": [
            {
              "name": "when",
              "type": {
                "name": "JdbcDate",
                "url": "https://developers.google.com/apps-script/reference"
              },
              "description": "A date to compare to."
            }
          ],
          "name": "after(when)",
          "description": "For documentation of this method, seejava.sql.Date#after(date).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "when",
              "type": {
                "name": "JdbcDate",
                "url": "https://developers.google.com/apps-script/reference"
              },
              "description": "A date to compare to."
            }
          ],
          "name": "before(when)",
          "description": "For documentation of this method, seejava.sql.Date#before(date).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getDate()",
          "description": "For documentation of this method, seejava.sql.Date#getDate().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getMonth()",
          "description": "For documentation of this method, seejava.sql.Date#getMonth().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getTime()",
          "description": "For documentation of this method, seejava.sql.Date#getTime().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getYear()",
          "description": "For documentation of this method, seejava.sql.Date#getYear().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "date",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The day of the month to set. The value is between 1 and 31, modified as needed. For\n    example, if the date was April 30, for example, and the date is set to 31, then it is\n    treated as if it were on May 1, because April has only 30 days."
            }
          ],
          "name": "setDate(date)",
          "description": "For documentation of this method, seejava.sql.Date#setDate(int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "month",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The month value to set. The value returned is between 0 and 11, with the value 0\n    representing January."
            }
          ],
          "name": "setMonth(month)",
          "description": "For documentation of this method, seejava.sql.Date#setMonth(int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "milliseconds",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The number of milliseconds since January 1, 1970, 00:00:00 GMT, not to\n    exceed the milliseconds representation for the year 8099. A negative number indicates the\n    number of milliseconds before January 1, 1970, 00:00:00 GMT."
            }
          ],
          "name": "setTime(milliseconds)",
          "description": "For documentation of this method, seejava.sql.Date#setTime(int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "year",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The value to set the year with. This value plus 1900 is the resulting year the date\n    has after this method executes."
            }
          ],
          "name": "setYear(year)",
          "description": "For documentation of this method, seejava.sql.Date#setYear(int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        }
      ]
    },
    {
      "name": "Class JdbcParameterMetaData",
      "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-parameter-meta-data",
      "description": "",
      "methods": [
        {
          "parameters": [
            {
              "name": "param",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to examine. The first parameter has an index of 1."
            }
          ],
          "name": "getParameterClassName(param)",
          "description": "For documentation of this method, seejava.sql.ParameterMetaData#getParameterClassName(int).",
          "return_type": {
            "name": "String",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getParameterCount()",
          "description": "For documentation of this method, seejava.sql.ParameterMetaData#getParameterCount().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "param",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to examine. The first parameter has an index of 1."
            }
          ],
          "name": "getParameterMode(param)",
          "description": "For documentation of this method, seejava.sql.ParameterMetaData#getParameterMode(int).",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "param",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to examine. The first parameter has an index of 1."
            }
          ],
          "name": "getParameterType(param)",
          "description": "For documentation of this method, seejava.sql.ParameterMetaData#getParameterType(int).",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "param",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to examine. The first parameter has an index of 1."
            }
          ],
          "name": "getParameterTypeName(param)",
          "description": "For documentation of this method, seejava.sql.ParameterMetaData#getParameterTypeName(int).",
          "return_type": {
            "name": "String",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "param",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to examine. The first parameter has an index of 1."
            }
          ],
          "name": "getPrecision(param)",
          "description": "For documentation of this method, seejava.sql.ParameterMetaData#getPrecision(int).",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "param",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to examine. The first parameter has an index of 1."
            }
          ],
          "name": "getScale(param)",
          "description": "For documentation of this method, seejava.sql.ParameterMetaData#getScale(int).",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "param",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to examine. The first parameter has an index of 1."
            }
          ],
          "name": "isNullable(param)",
          "description": "For documentation of this method, seejava.sql.ParameterMetaData#isNullable(int).",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "param",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to examine. The first parameter has an index of 1."
            }
          ],
          "name": "isSigned(param)",
          "description": "For documentation of this method, seejava.sql.ParameterMetaData#isSigned(int).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        }
      ]
    },
    {
      "name": "Class JdbcPreparedStatement",
      "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-prepared-statement",
      "description": "",
      "methods": [
        {
          "parameters": [],
          "name": "addBatch()",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#addBatch().",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "sql",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The SQL command to add to this statement, typically an SQLINSERTorUPDATE."
            }
          ],
          "name": "addBatch(sql)",
          "description": "For documentation of this method, seejava.sql.Statement#addBatch(String).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "cancel()",
          "description": "For documentation of this method, seejava.sql.Statement#cancel().",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "clearBatch()",
          "description": "For documentation of this method, seejava.sql.Statement#clearBatch().",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "clearParameters()",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#clearParameters().",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "clearWarnings()",
          "description": "For documentation of this method, seejava.sql.Statement#clearWarnings().",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "close()",
          "description": "For documentation of this method, seejava.sql.Statement#close().",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "execute()",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#execute().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "sql",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The SQL statement to execute."
            }
          ],
          "name": "execute(sql)",
          "description": "For documentation of this method, seejava.sql.Statement#execute(String).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "sql",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The SQL statement to execute."
            },
            {
              "name": "autoGeneratedKeys",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "A flag that indicates whether auto-generated keys are made available\n    for future retrieval; eitherJdbc.Statement.RETURN_GENERATED_KEYSorJdbc.Statement.NO_GENERATED_KEYS."
            }
          ],
          "name": "execute(sql, autoGeneratedKeys)",
          "description": "For documentation of this method, seejava.sql.Statement#execute(String, int).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "sql",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The SQL statement to execute."
            },
            {
              "name": "columnIndexes",
              "type": {
                "name": "Integer[]",
                "url": null
              },
              "description": "The column indices in the whose auto-generated keys are made available for\n    future retrieval."
            }
          ],
          "name": "execute(sql, columnIndexes)",
          "description": "For documentation of this method, seejava.sql.Statement#execute(String, int[]).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "sql",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The SQL statement to execute."
            },
            {
              "name": "columnNames",
              "type": {
                "name": "String[]",
                "url": null
              },
              "description": "The names of columns in the whose auto-generated keys are made available for\n    future retrieval."
            }
          ],
          "name": "execute(sql, columnNames)",
          "description": "For documentation of this method, seejava.sql.Statement#execute(String, String[]).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "executeBatch()",
          "description": "For documentation of this method, seejava.sql.Statement#executeBatch().",
          "return_type": {
            "name": "Integer[]",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "executeQuery()",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#executeQuery().",
          "return_type": {
            "name": "JdbcResultSet",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-result-set"
          }
        },
        {
          "parameters": [
            {
              "name": "sql",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The SQL statement to execute, typically a staticSELECT."
            }
          ],
          "name": "executeQuery(sql)",
          "description": "For documentation of this method, seejava.sql.Statement#executeQuery(String).",
          "return_type": {
            "name": "JdbcResultSet",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-result-set"
          }
        },
        {
          "parameters": [],
          "name": "executeUpdate()",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#executeUpdate().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "sql",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The SQL Data Manipulation Language statement to execute (such asINSERT,UPDATE, orDELETE), or else a statement that returns nothing (such as a DDL\n    statement)."
            }
          ],
          "name": "executeUpdate(sql)",
          "description": "For documentation of this method, seejava.sql.Statement#executeUpdate(String).",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "sql",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The SQL Data Manipulation Language statement to execute (such asINSERT,UPDATE, orDELETE), or else a statement that returns nothing (such as a DDL\n    statement)."
            },
            {
              "name": "autoGeneratedKeys",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "A flag that indicates whether auto-generated keys are made available\n    for future retrieval; eitherJdbc.Statement.RETURN_GENERATED_KEYSorJdbc.Statement.NO_GENERATED_KEYS."
            }
          ],
          "name": "executeUpdate(sql, autoGeneratedKeys)",
          "description": "For documentation of this method, seejava.sql.Statement#executeUpdate(String, int).",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "sql",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The SQL Data Manipulation Language statement to execute (such asINSERT,UPDATE, orDELETE), or else a statement that returns nothing (such as a DDL\n    statement)."
            },
            {
              "name": "columnIndexes",
              "type": {
                "name": "Integer[]",
                "url": null
              },
              "description": "The column indices in the whose auto-generated keys are made available for\n    future retrieval."
            }
          ],
          "name": "executeUpdate(sql, columnIndexes)",
          "description": "For documentation of this method, seejava.sql.Statement#executeUpdate(String, int[]).",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "sql",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The SQL Data Manipulation Language statement to execute (such asINSERT,UPDATE, orDELETE), or else a statement that returns nothing (such as a DDL\n    statement)."
            },
            {
              "name": "columnNames",
              "type": {
                "name": "String[]",
                "url": null
              },
              "description": "The names of columns in the whose auto-generated keys are made available for\n    future retrieval."
            }
          ],
          "name": "executeUpdate(sql, columnNames)",
          "description": "For documentation of this method, seejava.sql.Statement#executeUpdate(String, String[]).",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getConnection()",
          "description": "For documentation of this method, seejava.sql.Statement#getConnection().",
          "return_type": {
            "name": "JdbcConnection",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-connection"
          }
        },
        {
          "parameters": [],
          "name": "getFetchDirection()",
          "description": "For documentation of this method, seejava.sql.Statement#getFetchDirection().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getFetchSize()",
          "description": "For documentation of this method, seejava.sql.Statement#getFetchSize().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getGeneratedKeys()",
          "description": "For documentation of this method, seejava.sql.Statement#getGeneratedKeys().",
          "return_type": {
            "name": "JdbcResultSet",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-result-set"
          }
        },
        {
          "parameters": [],
          "name": "getMaxFieldSize()",
          "description": "For documentation of this method, seejava.sql.Statement#getMaxFieldSize().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getMaxRows()",
          "description": "For documentation of this method, seejava.sql.Statement#getMaxRows().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getMetaData()",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#getMetaData().",
          "return_type": {
            "name": "JdbcResultSetMetaData",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-result-set-meta-data"
          }
        },
        {
          "parameters": [],
          "name": "getMoreResults()",
          "description": "For documentation of this method, seejava.sql.Statement#getMoreResults().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "current",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "A flag that indicates what happens to current result sets when retrieved. This\n    value is one ofJdbc.Statement.CLOSE_CURRENT_RESULT,Jdbc.Statement.KEEP_CURRENT_RESULT, orJdbc.Statement.CLOSE_ALL_RESULTS."
            }
          ],
          "name": "getMoreResults(current)",
          "description": "For documentation of this method, seejava.sql.Statement#getMoreResults(int).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getParameterMetaData()",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#getParameterMetaData().",
          "return_type": {
            "name": "JdbcParameterMetaData",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-parameter-meta-data"
          }
        },
        {
          "parameters": [],
          "name": "getQueryTimeout()",
          "description": "For documentation of this method, seejava.sql.Statement#getQueryTimeout().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getResultSet()",
          "description": "For documentation of this method, seejava.sql.Statement#getResultSet().",
          "return_type": {
            "name": "JdbcResultSet",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-result-set"
          }
        },
        {
          "parameters": [],
          "name": "getResultSetConcurrency()",
          "description": "For documentation of this method, seejava.sql.Statement#getResultSetConcurrency().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getResultSetHoldability()",
          "description": "For documentation of this method, seejava.sql.Statement#getResultSetHoldability().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getResultSetType()",
          "description": "For documentation of this method, seejava.sql.Statement#getResultSetType().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getUpdateCount()",
          "description": "For documentation of this method, seejava.sql.Statement#getUpdateCount().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getWarnings()",
          "description": "For documentation of this method, seejava.sql.Statement#getWarnings().",
          "return_type": {
            "name": "String[]",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "isClosed()",
          "description": "For documentation of this method, seejava.sql.Statement#isClosed().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "isPoolable()",
          "description": "For documentation of this method, seejava.sql.Statement#isPoolable().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcArray",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-array"
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setArray(parameterIndex, x)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setArray(int, Array).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "BigNumber",
                "url": null
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setBigDecimal(parameterIndex, x)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setBigDecimal(int, BigDecimal).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcBlob",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-blob"
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setBlob(parameterIndex, x)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setBlob(int, Clob).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "Boolean",
                "url": null
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setBoolean(parameterIndex, x)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setBoolean(int, boolean).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "Byte",
                "url": null
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setByte(parameterIndex, x)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setByte(int, byte).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "Byte[]",
                "url": null
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setBytes(parameterIndex, x)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setBytes(int, byte[]).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcClob",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-clob"
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setClob(parameterIndex, x)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setClob(int, Clob).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "name",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The new cursor name, which must be unique within a connection."
            }
          ],
          "name": "setCursorName(name)",
          "description": "For documentation of this method, seejava.sql.Statement#setCursorName(String).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcDate",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-date"
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setDate(parameterIndex, x)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setDate(int, Date).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcDate",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-date"
              },
              "description": "The parameter value to set."
            },
            {
              "name": "timeZone",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "A time zone string used to constructjava.lang.Calendarinstance, which in turn is used to build the date. Several formats\n    of time zone strings are recognized: short IDs (such asPST,EST, andGMT), long IDs (such asUS/PacificandAmerica/Los_Angeles), and\n    offsets (such asGMT+6:30)."
            }
          ],
          "name": "setDate(parameterIndex, x, timeZone)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setDate(int, Date, Calendar).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "Number",
                "url": null
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setDouble(parameterIndex, x)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setDouble(int, double).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "enable",
              "type": {
                "name": "Boolean",
                "url": null
              },
              "description": "Iftrue, escape processing is enabled; otherwise it is disabled."
            }
          ],
          "name": "setEscapeProcessing(enable)",
          "description": "For documentation of this method, seejava.sql.Statement#setEscapeProcessing(boolean).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "direction",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The specified direction to set, which is eitherJdbc.ResultSet.FETCH_FORWARDorJdbc.ResultSet.FETCH_REVERSE."
            }
          ],
          "name": "setFetchDirection(direction)",
          "description": "For documentation of this method, seejava.sql.Statement#setFetchDirection(int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "rows",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The number of rows to fetch."
            }
          ],
          "name": "setFetchSize(rows)",
          "description": "For documentation of this method, seejava.sql.Statement#setFetchSize(int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "Number",
                "url": null
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setFloat(parameterIndex, x)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setFloat(int, float).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setInt(parameterIndex, x)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setInt(int, int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setLong(parameterIndex, x)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setLong(int, long).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "max",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The new column byte size limit; a value of zero indicates no limit."
            }
          ],
          "name": "setMaxFieldSize(max)",
          "description": "For documentation of this method, seejava.sql.Statement#setMaxFieldSize(int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "max",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The maximum number of rows a result set generated by this statement can have. A\n    value of 0 indicates no limit."
            }
          ],
          "name": "setMaxRows(max)",
          "description": "For documentation of this method, seejava.sql.Statement#setMaxRows(int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcClob",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-clob"
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setNClob(parameterIndex, x)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setNClob(int, NClob).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setNString(parameterIndex, x)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setNString(int, String).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "sqlType",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "TheSQL\n    typeof the specified parameter."
            }
          ],
          "name": "setNull(parameterIndex, sqlType)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setNull(int, int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "sqlType",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "TheSQL\n    typeof the specified parameter."
            },
            {
              "name": "typeName",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The fully-qualifed name of an SQL user-defined type. Ignored if the parameter\n    isn't a user-defined type orREF."
            }
          ],
          "name": "setNull(parameterIndex, sqlType, typeName)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setNull(int, int, String).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "index",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second is 2, and\n    so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "Object",
                "url": null
              },
              "description": "The object containing the value to set the parameter to."
            }
          ],
          "name": "setObject(index, x)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setObject(int, Object).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "Object",
                "url": null
              },
              "description": "The object containing the value to set the parameter to."
            },
            {
              "name": "targetSqlType",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "TheSQL typeto send\n    to the database."
            }
          ],
          "name": "setObject(parameterIndex, x, targetSqlType)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setObject(int, Object, int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "Object",
                "url": null
              },
              "description": "The object containing the value to set the parameter to."
            },
            {
              "name": "targetSqlType",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "TheSQL typeto send\n    to the database. The scale argument may further qualify this type."
            },
            {
              "name": "scaleOrLength",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The number of digits after the decimal forDECIMALorNUMERICtypes, or the length of data forInputStreamorReadertypes.\n    Ignored for all other types."
            }
          ],
          "name": "setObject(parameterIndex, x, targetSqlType, scaleOrLength)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setObject(int, Object, int, int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "poolable",
              "type": {
                "name": "Boolean",
                "url": null
              },
              "description": "Iftrue, requests that this statement be pooled; otherwise requests it\n    not be pooled."
            }
          ],
          "name": "setPoolable(poolable)",
          "description": "For documentation of this method, seejava.sql.Statement#setPoolable(boolean).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "seconds",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The new query timeout in seconds; a value of 0 indicates no timeout."
            }
          ],
          "name": "setQueryTimeout(seconds)",
          "description": "For documentation of this method, seejava.sql.Statement#setQueryTimeout(int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcRef",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-ref"
              },
              "description": "The SQLREFvalue to set."
            }
          ],
          "name": "setRef(parameterIndex, x)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setRef(int, Ref).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcRowId",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-row-id"
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setRowId(parameterIndex, x)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setRowId(int, RowId).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcSQLXML",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-sqlxml"
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setSQLXML(parameterIndex, x)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setSQLXML(int, SQLXML).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setShort(parameterIndex, x)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setShort(int, short).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setString(parameterIndex, x)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setString(int, String).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcTime",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-time"
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setTime(parameterIndex, x)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setTime(int, Time).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcTime",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-time"
              },
              "description": "The parameter value to set."
            },
            {
              "name": "timeZone",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "A time zone string used to constructjava.lang.Calendarinstance, which in turn is used to build the date. Several formats\n    of time zone strings are recognized: short IDs (such asPST,EST, andGMT), long IDs (such asUS/PacificandAmerica/Los_Angeles), and\n    offsets (such asGMT+6:30)."
            }
          ],
          "name": "setTime(parameterIndex, x, timeZone)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setTime(int, Time, Calendar).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcTimestamp",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-timestamp"
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setTimestamp(parameterIndex, x)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setTimestamp(int, Timestamp).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcTimestamp",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-timestamp"
              },
              "description": "The parameter value to set."
            },
            {
              "name": "timeZone",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "A time zone string used to constructjava.lang.Calendarinstance, which in turn is used to build the date. Several formats\n    of time zone strings are recognized: short IDs (such asPST,EST, andGMT), long IDs (such asUS/PacificandAmerica/Los_Angeles), and\n    offsets (such asGMT+6:30)."
            }
          ],
          "name": "setTimestamp(parameterIndex, x, timeZone)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setTimestamp(int, Timestamp, Calendar).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "parameterIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the parameter to set (the first parameter is 1, the second\n    is 2, and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The parameter value to set."
            }
          ],
          "name": "setURL(parameterIndex, x)",
          "description": "For documentation of this method, seejava.sql.PreparedStatement#setURL(int, URL).",
          "return_type": {
            "name": "void",
            "url": null
          }
        }
      ]
    },
    {
      "name": "Class JdbcRef",
      "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-ref",
      "description": "",
      "methods": [
        {
          "parameters": [],
          "name": "getBaseTypeName()",
          "description": "For documentation of this method, seejava.sql.Ref#getBaseTypeName().",
          "return_type": {
            "name": "String",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getObject()",
          "description": "For documentation of this method, seejava.sql.Ref#getObject().",
          "return_type": {
            "name": "Object",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "object",
              "type": {
                "name": "Object",
                "url": null
              },
              "description": "The object to set as the refernence target."
            }
          ],
          "name": "setObject(object)",
          "description": "For documentation of this method, seejava.sql.Ref#setObject(Object).",
          "return_type": {
            "name": "void",
            "url": null
          }
        }
      ]
    },
    {
      "name": "Class JdbcResultSet",
      "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-result-set",
      "description": "",
      "methods": [
        {
          "parameters": [
            {
              "name": "row",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The number of the row to which the cursor moves to. A positive number indicates the\n    row number counting from the start of the result set, while a negative number indicates the\n    counting from the end of the result set."
            }
          ],
          "name": "absolute(row)",
          "description": "For documentation of this method, seejava.sql.ResultSet#absolute(int).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "afterLast()",
          "description": "For documentation of this method, seejava.sql.ResultSet#afterLast().",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "beforeFirst()",
          "description": "For documentation of this method, seejava.sql.ResultSet#beforeFirst().",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "cancelRowUpdates()",
          "description": "For documentation of this method, seejava.sql.ResultSet#cancelRowUpdates().",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "clearWarnings()",
          "description": "For documentation of this method, seejava.sql.ResultSet#clearWarnings().",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "close()",
          "description": "For documentation of this method, seejava.sql.ResultSet#close().",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "deleteRow()",
          "description": "For documentation of this method, seejava.sql.ResultSet#deleteRow().",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            }
          ],
          "name": "findColumn(columnLabel)",
          "description": "For documentation of this method, seejava.sql.ResultSet#findColumn(String).",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "first()",
          "description": "For documentation of this method, seejava.sql.ResultSet#first().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to retrieve the data from (the first column is 1,\n    the second is 2, and so on)."
            }
          ],
          "name": "getArray(columnIndex)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getArray(int).",
          "return_type": {
            "name": "JdbcArray",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-array"
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            }
          ],
          "name": "getArray(columnLabel)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getArray(String).",
          "return_type": {
            "name": "JdbcArray",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-array"
          }
        },
        {
          "parameters": [
            {
              "name": "columnIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to retrieve the data from (the first column is 1,\n    the second is 2, and so on)."
            }
          ],
          "name": "getBigDecimal(columnIndex)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getBigDecimal(int).",
          "return_type": {
            "name": "BigNumber",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            }
          ],
          "name": "getBigDecimal(columnLabel)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getBigDecimal(String).",
          "return_type": {
            "name": "BigNumber",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to retrieve the data from (the first column is 1,\n    the second is 2, and so on)."
            }
          ],
          "name": "getBlob(columnIndex)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getBlob(int).",
          "return_type": {
            "name": "JdbcBlob",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-blob"
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            }
          ],
          "name": "getBlob(columnLabel)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getBlob(String).",
          "return_type": {
            "name": "JdbcBlob",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-blob"
          }
        },
        {
          "parameters": [
            {
              "name": "columnIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to retrieve (the first column is 1, the second is 2,\n    and so on)."
            }
          ],
          "name": "getBoolean(columnIndex)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getBoolean(int).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            }
          ],
          "name": "getBoolean(columnLabel)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getBoolean(String).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to retrieve (the first column is 1, the second is 2,\n    and so on)."
            }
          ],
          "name": "getByte(columnIndex)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getByte(int).",
          "return_type": {
            "name": "Byte",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            }
          ],
          "name": "getByte(columnLabel)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getByte(String).",
          "return_type": {
            "name": "Byte",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to retrieve (the first column is 1, the second is 2,\n    and so on)."
            }
          ],
          "name": "getBytes(columnIndex)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getBytes(int).",
          "return_type": {
            "name": "Byte[]",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            }
          ],
          "name": "getBytes(columnLabel)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getBytes(String).",
          "return_type": {
            "name": "Byte[]",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to retrieve the data from (the first column is 1,\n    the second is 2, and so on)."
            }
          ],
          "name": "getClob(columnIndex)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getClob(int).",
          "return_type": {
            "name": "JdbcClob",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-clob"
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            }
          ],
          "name": "getClob(columnLabel)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getClob(String).",
          "return_type": {
            "name": "JdbcClob",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-clob"
          }
        },
        {
          "parameters": [],
          "name": "getConcurrency()",
          "description": "For documentation of this method, seejava.sql.ResultSet#getConcurrency().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getCursorName()",
          "description": "For documentation of this method, seejava.sql.ResultSet#getCursorName().",
          "return_type": {
            "name": "String",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to retrieve (the first column is 1, the second is 2,\n    and so on)."
            }
          ],
          "name": "getDate(columnIndex)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getDate(int).",
          "return_type": {
            "name": "JdbcDate",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-date"
          }
        },
        {
          "parameters": [
            {
              "name": "columnIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to retrieve (the first column is 1, the second is 2,\n    and so on)."
            },
            {
              "name": "timeZone",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "A time zone string used to constructjava.lang.Calendarinstance, which in turn is used to build the date. Several formats\n    of time zone strings are recognized: short IDs (such asPST,EST, andGMT), long IDs (such asUS/PacificandAmerica/Los_Angeles), and\n    offsets (such asGMT+6:30)."
            }
          ],
          "name": "getDate(columnIndex, timeZone)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getDate(int, Calendar).",
          "return_type": {
            "name": "JdbcDate",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-date"
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            }
          ],
          "name": "getDate(columnLabel)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getDate(String).",
          "return_type": {
            "name": "JdbcDate",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-date"
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            },
            {
              "name": "timeZone",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "A time zone string used to constructjava.lang.Calendarinstance, which in turn is used to build the date. Several formats\n    of time zone strings are recognized: short IDs (such asPST,EST, andGMT), long IDs (such asUS/PacificandAmerica/Los_Angeles), and\n    offsets (such asGMT+6:30)."
            }
          ],
          "name": "getDate(columnLabel, timeZone)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getDate(String, Calendar).",
          "return_type": {
            "name": "JdbcDate",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-date"
          }
        },
        {
          "parameters": [
            {
              "name": "columnIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to retrieve (the first column is 1, the second is 2,\n    and so on)."
            }
          ],
          "name": "getDouble(columnIndex)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getDouble(int).",
          "return_type": {
            "name": "Number",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            }
          ],
          "name": "getDouble(columnLabel)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getDouble(String).",
          "return_type": {
            "name": "Number",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getFetchDirection()",
          "description": "For documentation of this method, seejava.sql.ResultSet#getFetchDirection().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getFetchSize()",
          "description": "For documentation of this method, seejava.sql.ResultSet#getFetchSize().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to retrieve (the first column is 1, the second is 2,\n    and so on)."
            }
          ],
          "name": "getFloat(columnIndex)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getFloat(int).",
          "return_type": {
            "name": "Number",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            }
          ],
          "name": "getFloat(columnLabel)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getFloat(String).",
          "return_type": {
            "name": "Number",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getHoldability()",
          "description": "For documentation of this method, seejava.sql.ResultSet#getHoldability().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to retrieve (the first column is 1, the second is 2,\n    and so on)."
            }
          ],
          "name": "getInt(columnIndex)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getInt(int).",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            }
          ],
          "name": "getInt(columnLabel)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getInt(String).",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to retrieve (the first column is 1, the second is 2,\n    and so on)."
            }
          ],
          "name": "getLong(columnIndex)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getLong(int).",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            }
          ],
          "name": "getLong(columnLabel)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getLong(String).",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getMetaData()",
          "description": "For documentation of this method, seejava.sql.ResultSet#getMetaData().",
          "return_type": {
            "name": "JdbcResultSetMetaData",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-result-set-meta-data"
          }
        },
        {
          "parameters": [
            {
              "name": "columnIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to retrieve the data from (the first column is 1,\n    the second is 2, and so on)."
            }
          ],
          "name": "getNClob(columnIndex)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getNClob(int).",
          "return_type": {
            "name": "JdbcClob",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-clob"
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            }
          ],
          "name": "getNClob(columnLabel)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getNClob(String).",
          "return_type": {
            "name": "JdbcClob",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-clob"
          }
        },
        {
          "parameters": [
            {
              "name": "columnIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to retrieve the data from (the first column is 1,\n    the second is 2, and so on)."
            }
          ],
          "name": "getNString(columnIndex)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getNString(int).",
          "return_type": {
            "name": "String",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            }
          ],
          "name": "getNString(columnLabel)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getNString(String).",
          "return_type": {
            "name": "String",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to retrieve the data from (the first column is 1,\n    the second is 2, and so on)."
            }
          ],
          "name": "getObject(columnIndex)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getObject(int).",
          "return_type": {
            "name": "Object",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            }
          ],
          "name": "getObject(columnLabel)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getObject(String).",
          "return_type": {
            "name": "Object",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to retrieve the data from (the first column is 1,\n    the second is 2, and so on)."
            }
          ],
          "name": "getRef(columnIndex)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getRef(int).",
          "return_type": {
            "name": "JdbcRef",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-ref"
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            }
          ],
          "name": "getRef(columnLabel)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getRef(String).",
          "return_type": {
            "name": "JdbcRef",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-ref"
          }
        },
        {
          "parameters": [],
          "name": "getRow()",
          "description": "For documentation of this method, seejava.sql.ResultSet#getRow().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to retrieve the data from (the first column is 1,\n    the second is 2, and so on)."
            }
          ],
          "name": "getRowId(columnIndex)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getRowId(int).",
          "return_type": {
            "name": "JdbcRowId",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-row-id"
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            }
          ],
          "name": "getRowId(columnLabel)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getRowId(String).",
          "return_type": {
            "name": "JdbcRowId",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-row-id"
          }
        },
        {
          "parameters": [
            {
              "name": "columnIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to retrieve the data from (the first column is 1,\n    the second is 2, and so on)."
            }
          ],
          "name": "getSQLXML(columnIndex)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getSQLXML(int).",
          "return_type": {
            "name": "JdbcSQLXML",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-sqlxml"
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            }
          ],
          "name": "getSQLXML(columnLabel)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getSQLXML(String).",
          "return_type": {
            "name": "JdbcSQLXML",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-sqlxml"
          }
        },
        {
          "parameters": [
            {
              "name": "columnIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to retrieve (the first column is 1, the second is 2,\n    and so on)."
            }
          ],
          "name": "getShort(columnIndex)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getShort(int).",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            }
          ],
          "name": "getShort(columnLabel)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getShort(String).",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getStatement()",
          "description": "For documentation of this method, seejava.sql.ResultSet#getStatement().",
          "return_type": {
            "name": "JdbcStatement",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-statement"
          }
        },
        {
          "parameters": [
            {
              "name": "columnIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to retrieve (the first column is 1, the second is 2,\n    and so on)."
            }
          ],
          "name": "getString(columnIndex)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getString(int).",
          "return_type": {
            "name": "String",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            }
          ],
          "name": "getString(columnLabel)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getString(String).",
          "return_type": {
            "name": "String",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to retrieve (the first column is 1, the second is 2,\n    and so on)."
            }
          ],
          "name": "getTime(columnIndex)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getTime(int).",
          "return_type": {
            "name": "JdbcTime",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-time"
          }
        },
        {
          "parameters": [
            {
              "name": "columnIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to retrieve (the first column is 1, the second is 2,\n    and so on)."
            },
            {
              "name": "timeZone",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "A time zone string used to constructjava.lang.Calendarinstance, which in turn is used to build the date. Several formats\n    of time zone strings are recognized: short IDs (such asPST,EST, andGMT), long IDs (such asUS/PacificandAmerica/Los_Angeles), and\n    offsets (such asGMT+6:30)."
            }
          ],
          "name": "getTime(columnIndex, timeZone)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getTime(int, Calendar).",
          "return_type": {
            "name": "JdbcTime",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-time"
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            }
          ],
          "name": "getTime(columnLabel)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getTime(String).",
          "return_type": {
            "name": "JdbcTime",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-time"
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            },
            {
              "name": "timeZone",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "A time zone string used to constructjava.lang.Calendarinstance, which in turn is used to build the date. Several formats\n    of time zone strings are recognized: short IDs (such asPST,EST, andGMT), long IDs (such asUS/PacificandAmerica/Los_Angeles), and\n    offsets (such asGMT+6:30)."
            }
          ],
          "name": "getTime(columnLabel, timeZone)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getTime(String, Calendar).",
          "return_type": {
            "name": "JdbcTime",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-time"
          }
        },
        {
          "parameters": [
            {
              "name": "columnIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to retrieve (the first column is 1, the second is 2,\n    and so on)."
            }
          ],
          "name": "getTimestamp(columnIndex)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getTimestamp(int).",
          "return_type": {
            "name": "JdbcTimestamp",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-timestamp"
          }
        },
        {
          "parameters": [
            {
              "name": "columnIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to retrieve (the first column is 1, the second is 2,\n    and so on)."
            },
            {
              "name": "timeZone",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "A time zone string used to constructjava.lang.Calendarinstance, which in turn is used to build the date. Several formats\n    of time zone strings are recognized: short IDs (such asPST,EST, andGMT), long IDs (such asUS/PacificandAmerica/Los_Angeles), and\n    offsets (such asGMT+6:30)."
            }
          ],
          "name": "getTimestamp(columnIndex, timeZone)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getTimestamp(int, Calendar).",
          "return_type": {
            "name": "JdbcTimestamp",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-timestamp"
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            }
          ],
          "name": "getTimestamp(columnLabel)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getTimestamp(String).",
          "return_type": {
            "name": "JdbcTimestamp",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-timestamp"
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            },
            {
              "name": "timeZone",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "A time zone string used to constructjava.lang.Calendarinstance, which in turn is used to build the date. Several formats\n    of time zone strings are recognized: short IDs (such asPST,EST, andGMT), long IDs (such asUS/PacificandAmerica/Los_Angeles), and\n    offsets (such asGMT+6:30)."
            }
          ],
          "name": "getTimestamp(columnLabel, timeZone)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getTimestamp(String, Calendar).",
          "return_type": {
            "name": "JdbcTimestamp",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-timestamp"
          }
        },
        {
          "parameters": [],
          "name": "getType()",
          "description": "For documentation of this method, seejava.sql.ResultSet#getType().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to retrieve the data from (the first column is 1,\n    the second is 2, and so on)."
            }
          ],
          "name": "getURL(columnIndex)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getURL(int).",
          "return_type": {
            "name": "String",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            }
          ],
          "name": "getURL(columnLabel)",
          "description": "For documentation of this method, seejava.sql.ResultSet#getURL(String).",
          "return_type": {
            "name": "String",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getWarnings()",
          "description": "Returns the current set of warnings reported by the driver.",
          "return_type": {
            "name": "String[]",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "insertRow()",
          "description": "For documentation of this method, seejava.sql.ResultSet#insertRow().",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "isAfterLast()",
          "description": "For documentation of this method, seejava.sql.ResultSet#isAfterLast().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "isBeforeFirst()",
          "description": "For documentation of this method, seejava.sql.ResultSet#isBeforeFirst().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "isClosed()",
          "description": "For documentation of this method, seejava.sql.ResultSet#isClosed().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "isFirst()",
          "description": "For documentation of this method, seejava.sql.ResultSet#isFirst().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "isLast()",
          "description": "For documentation of this method, seejava.sql.ResultSet#isLast().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "last()",
          "description": "For documentation of this method, seejava.sql.ResultSet#first().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "moveToCurrentRow()",
          "description": "For documentation of this method, seejava.sql.ResultSet#moveToCurrentRow().",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "moveToInsertRow()",
          "description": "For documentation of this method, seejava.sql.ResultSet#moveToInsertRow().",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "next()",
          "description": "For documentation of this method, seejava.sql.ResultSet#next().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "previous()",
          "description": "For documentation of this method, seejava.sql.ResultSet#previous().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "refreshRow()",
          "description": "For documentation of this method, seejava.sql.ResultSet#refreshRow().",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "rows",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The number row steps to move the cursor. A positive number moves the cursor\n    forward, while a negative number moves the cursor backward."
            }
          ],
          "name": "relative(rows)",
          "description": "For documentation of this method, seejava.sql.ResultSet#relative(int).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "rowDeleted()",
          "description": "For documentation of this method, seejava.sql.ResultSet#rowDeleted().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "rowInserted()",
          "description": "For documentation of this method, seejava.sql.ResultSet#rowInserted().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "rowUpdated()",
          "description": "For documentation of this method, seejava.sql.ResultSet#rowUpdated().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "direction",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The specified direction to set, which is eitherJdbc.ResultSet.FETCH_FORWARDorJdbc.ResultSet.FETCH_REVERSE."
            }
          ],
          "name": "setFetchDirection(direction)",
          "description": "For documentation of this method, seejava.sql.ResultSet#setFetchDirection(int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "rows",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The number of rows to fetch."
            }
          ],
          "name": "setFetchSize(rows)",
          "description": "For documentation of this method, seejava.sql.ResultSet#setFetchSize(int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to update (the first column is 1, the second is 2,\n    and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcArray",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-array"
              },
              "description": "The new column value."
            }
          ],
          "name": "updateArray(columnIndex, x)",
          "description": "For documentation of this method, seejava.sql.ResultSet#updateArray(int, Array).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcArray",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-array"
              },
              "description": "The new column value."
            }
          ],
          "name": "updateArray(columnLabel, x)",
          "description": "For documentation of this method, seejava.sql.ResultSet#updateArray(String, Array).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to update (the first column is 1, the second is 2,\n    and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "BigNumber",
                "url": null
              },
              "description": "The new column value."
            }
          ],
          "name": "updateBigDecimal(columnIndex, x)",
          "description": "For documentation of this method, seejava.sql.ResultSet#updateBigDecimal(int, BigDecimal).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            },
            {
              "name": "x",
              "type": {
                "name": "BigNumber",
                "url": null
              },
              "description": "The new column value."
            }
          ],
          "name": "updateBigDecimal(columnLabel, x)",
          "description": "For documentation of this method, seejava.sql.ResultSet#updateBigDecimal(String, BigDecimal).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to update (the first column is 1, the second is 2,\n    and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcBlob",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-blob"
              },
              "description": "The new column value."
            }
          ],
          "name": "updateBlob(columnIndex, x)",
          "description": "For documentation of this method, seejava.sql.ResultSet#updateBlob(int, Blob).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcBlob",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-blob"
              },
              "description": "The new column value."
            }
          ],
          "name": "updateBlob(columnLabel, x)",
          "description": "For documentation of this method, seejava.sql.ResultSet#updateRef(String, Blob).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to update (the first column is 1, the second is 2,\n    and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "Boolean",
                "url": null
              },
              "description": "The new column value."
            }
          ],
          "name": "updateBoolean(columnIndex, x)",
          "description": "For documentation of this method, seejava.sql.ResultSet#updateBoolean(int, boolean).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            },
            {
              "name": "x",
              "type": {
                "name": "Boolean",
                "url": null
              },
              "description": "The new column value."
            }
          ],
          "name": "updateBoolean(columnLabel, x)",
          "description": "For documentation of this method, seejava.sql.ResultSet#updateBoolean(String, boolean).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to update (the first column is 1, the second is 2,\n    and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "Byte",
                "url": null
              },
              "description": "The new column value."
            }
          ],
          "name": "updateByte(columnIndex, x)",
          "description": "For documentation of this method, seejava.sql.ResultSet#updateByte(int, byte).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            },
            {
              "name": "x",
              "type": {
                "name": "Byte",
                "url": null
              },
              "description": "The new column value."
            }
          ],
          "name": "updateByte(columnLabel, x)",
          "description": "For documentation of this method, seejava.sql.ResultSet#updateByte(String, byte).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to update (the first column is 1, the second is 2,\n    and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "Byte[]",
                "url": null
              },
              "description": "The new column value."
            }
          ],
          "name": "updateBytes(columnIndex, x)",
          "description": "For documentation of this method, seejava.sql.ResultSet#updateBytes(int, byte[]).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            },
            {
              "name": "x",
              "type": {
                "name": "Byte[]",
                "url": null
              },
              "description": "The new column value."
            }
          ],
          "name": "updateBytes(columnLabel, x)",
          "description": "For documentation of this method, seejava.sql.ResultSet#updateBytes(String, byte[]).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to update (the first column is 1, the second is 2,\n    and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcClob",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-clob"
              },
              "description": "The new column value."
            }
          ],
          "name": "updateClob(columnIndex, x)",
          "description": "For documentation of this method, seejava.sql.ResultSet#updateClob(int, Clob).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcClob",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-clob"
              },
              "description": "The new column value."
            }
          ],
          "name": "updateClob(columnLabel, x)",
          "description": "For documentation of this method, seejava.sql.ResultSet#updateClob(String, Clob).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to update (the first column is 1, the second is 2,\n    and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcDate",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-date"
              },
              "description": "The new column value."
            }
          ],
          "name": "updateDate(columnIndex, x)",
          "description": "For documentation of this method, seejava.sql.ResultSet#updateDate(int, Date).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcDate",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-date"
              },
              "description": "The new column value."
            }
          ],
          "name": "updateDate(columnLabel, x)",
          "description": "For documentation of this method, seejava.sql.ResultSet#updateDate(String, Date).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to update (the first column is 1, the second is 2,\n    and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "Number",
                "url": null
              },
              "description": "The new column value."
            }
          ],
          "name": "updateDouble(columnIndex, x)",
          "description": "For documentation of this method, seejava.sql.ResultSet#updateDouble(int, double).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            },
            {
              "name": "x",
              "type": {
                "name": "Number",
                "url": null
              },
              "description": "The new column value."
            }
          ],
          "name": "updateDouble(columnLabel, x)",
          "description": "For documentation of this method, seejava.sql.ResultSet#updateDouble(String, double).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to update (the first column is 1, the second is 2,\n    and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "Number",
                "url": null
              },
              "description": "The new column value."
            }
          ],
          "name": "updateFloat(columnIndex, x)",
          "description": "For documentation of this method, seejava.sql.ResultSet#updateFloat(int, float).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            },
            {
              "name": "x",
              "type": {
                "name": "Number",
                "url": null
              },
              "description": "The new column value."
            }
          ],
          "name": "updateFloat(columnLabel, x)",
          "description": "For documentation of this method, seejava.sql.ResultSet#updateFloat(String, float).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to update (the first column is 1, the second is 2,\n    and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The new column value."
            }
          ],
          "name": "updateInt(columnIndex, x)",
          "description": "For documentation of this method, seejava.sql.ResultSet#updateInt(int, int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            },
            {
              "name": "x",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The new column value."
            }
          ],
          "name": "updateInt(columnLabel, x)",
          "description": "For documentation of this method, seejava.sql.ResultSet#updateInt(String, int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to update (the first column is 1, the second is 2,\n    and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The new column value."
            }
          ],
          "name": "updateLong(columnIndex, x)",
          "description": "For documentation of this method, seejava.sql.ResultSet#updateLong(int, long).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            },
            {
              "name": "x",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The new column value."
            }
          ],
          "name": "updateLong(columnLabel, x)",
          "description": "For documentation of this method, seejava.sql.ResultSet#updateLong(String, long).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to update (the first column is 1, the second is 2,\n    and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcClob",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-clob"
              },
              "description": "The new column value."
            }
          ],
          "name": "updateNClob(columnIndex, x)",
          "description": "For documentation of this method, seejava.sql.ResultSet#updateNClob(int, NClob).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcClob",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-clob"
              },
              "description": "The new column value."
            }
          ],
          "name": "updateNClob(columnLabel, x)",
          "description": "For documentation of this method, seejava.sql.ResultSet#updateNClob(String, NClob).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to update (the first column is 1, the second is 2,\n    and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The new column value."
            }
          ],
          "name": "updateNString(columnIndex, x)",
          "description": "For documentation of this method, seejava.sql.ResultSet#updateNString(int, String).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            },
            {
              "name": "x",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The new column value."
            }
          ],
          "name": "updateNString(columnLabel, x)",
          "description": "For documentation of this method, seejava.sql.ResultSet#updateNString(String, String).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to update (the first column is 1, the second is 2,\n    and so on)."
            }
          ],
          "name": "updateNull(columnIndex)",
          "description": "For documentation of this method, seejava.sql.ResultSet#updateNull(int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            }
          ],
          "name": "updateNull(columnLabel)",
          "description": "For documentation of this method, seejava.sql.ResultSet#updateNull(String).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to update (the first column is 1, the second is 2,\n    and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "Object",
                "url": null
              },
              "description": "The new column value."
            }
          ],
          "name": "updateObject(columnIndex, x)",
          "description": "For documentation of this method, seejava.sql.ResultSet#updateObject(int, Object).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to update (the first column is 1, the second is 2,\n    and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "Object",
                "url": null
              },
              "description": "The new column value."
            },
            {
              "name": "scaleOrLength",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The number of digits after the decimal forBigDecimaltypes, or\n    the length of data forInputStreamorReadertypes. Ignored for all other\n    types."
            }
          ],
          "name": "updateObject(columnIndex, x, scaleOrLength)",
          "description": "For documentation of this method, seejava.sql.ResultSet#updateObject(int, Object, int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            },
            {
              "name": "x",
              "type": {
                "name": "Object",
                "url": null
              },
              "description": "The new column value."
            }
          ],
          "name": "updateObject(columnLabel, x)",
          "description": "For documentation of this method, seejava.sql.ResultSet#updateObject(String, Object).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            },
            {
              "name": "x",
              "type": {
                "name": "Object",
                "url": null
              },
              "description": "The new column value."
            },
            {
              "name": "scaleOrLength",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The number of digits after the decimal forBigDecimaltypes, or\n    the length of data forInputStreamorReadertypes. Ignored for all other\n    types."
            }
          ],
          "name": "updateObject(columnLabel, x, scaleOrLength)",
          "description": "For documentation of this method, seejava.sql.ResultSet#updateObject(String, Object, int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to update (the first column is 1, the second is 2,\n    and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcRef",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-ref"
              },
              "description": "The new column value."
            }
          ],
          "name": "updateRef(columnIndex, x)",
          "description": "For documentation of this method, seejava.sql.ResultSet#updateRef(int, Ref).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcRef",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-ref"
              },
              "description": "The new column value."
            }
          ],
          "name": "updateRef(columnLabel, x)",
          "description": "For documentation of this method, seejava.sql.ResultSet#updateRef(String, Ref).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "updateRow()",
          "description": "For documentation of this method, seejava.sql.ResultSet#updateRow().",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to update (the first column is 1, the second is 2,\n    and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcRowId",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-row-id"
              },
              "description": "The new column value."
            }
          ],
          "name": "updateRowId(columnIndex, x)",
          "description": "For documentation of this method, seejava.sql.ResultSet#updateRowId(int, RowId).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcRowId",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-row-id"
              },
              "description": "The new column value."
            }
          ],
          "name": "updateRowId(columnLabel, x)",
          "description": "For documentation of this method, seejava.sql.ResultSet#updateRowId(String, RowId).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to update (the first column is 1, the second is 2,\n    and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcSQLXML",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-sqlxml"
              },
              "description": "The new column value."
            }
          ],
          "name": "updateSQLXML(columnIndex, x)",
          "description": "For documentation of this method, seejava.sql.ResultSet#updateSQLXML(int, SQLXML).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcSQLXML",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-sqlxml"
              },
              "description": "The new column value."
            }
          ],
          "name": "updateSQLXML(columnLabel, x)",
          "description": "For documentation of this method, seejava.sql.ResultSet#updateSQLXML(String, SQLXML).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to update (the first column is 1, the second is 2,\n    and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The new column value."
            }
          ],
          "name": "updateShort(columnIndex, x)",
          "description": "For documentation of this method, seejava.sql.ResultSet#updateShort(int, short).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            },
            {
              "name": "x",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The new column value."
            }
          ],
          "name": "updateShort(columnLabel, x)",
          "description": "For documentation of this method, seejava.sql.ResultSet#updateShort(String, short).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to update (the first column is 1, the second is 2,\n    and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The new column value."
            }
          ],
          "name": "updateString(columnIndex, x)",
          "description": "For documentation of this method, seejava.sql.ResultSet#updateString(int, String).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            },
            {
              "name": "x",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The new column value."
            }
          ],
          "name": "updateString(columnLabel, x)",
          "description": "For documentation of this method, seejava.sql.ResultSet#updateString(String, String).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to update (the first column is 1, the second is 2,\n    and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcTime",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-time"
              },
              "description": "The new column value."
            }
          ],
          "name": "updateTime(columnIndex, x)",
          "description": "For documentation of this method, seejava.sql.ResultSet#updateTime(int, Time).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcTime",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-time"
              },
              "description": "The new column value."
            }
          ],
          "name": "updateTime(columnLabel, x)",
          "description": "For documentation of this method, seejava.sql.ResultSet#updateTime(String, Time).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnIndex",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to update (the first column is 1, the second is 2,\n    and so on)."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcTimestamp",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-timestamp"
              },
              "description": "The new column value."
            }
          ],
          "name": "updateTimestamp(columnIndex, x)",
          "description": "For documentation of this method, seejava.sql.ResultSet#updateTimestamp(int, Timestamp).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "columnLabel",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The label for the column, specified with the SQL AS clause. If the AS clause\n    wasn't specified, then the label is the name of the column."
            },
            {
              "name": "x",
              "type": {
                "name": "JdbcTimestamp",
                "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-timestamp"
              },
              "description": "The new column value."
            }
          ],
          "name": "updateTimestamp(columnLabel, x)",
          "description": "For documentation of this method, seejava.sql.ResultSet#updateTimestamp(String, Timestamp).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "wasNull()",
          "description": "For documentation of this method, seejava.sql.ResultSet#wasNull().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        }
      ]
    },
    {
      "name": "Class JdbcResultSetMetaData",
      "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-result-set-meta-data",
      "description": "",
      "methods": [
        {
          "parameters": [
            {
              "name": "column",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to examine (the first column is 1, the second is 2, and\n    so on)."
            }
          ],
          "name": "getCatalogName(column)",
          "description": "For documentation of this method, seejava.sql.ResultSetMetaData#getCatalogName(int).",
          "return_type": {
            "name": "String",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "column",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to examine (the first column is 1, the second is 2, and\n    so on)."
            }
          ],
          "name": "getColumnClassName(column)",
          "description": "For documentation of this method, seejava.sql.ResultSetMetaData#getColumnClassName(int).",
          "return_type": {
            "name": "String",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getColumnCount()",
          "description": "For documentation of this method, seejava.sql.ResultSetMetaData#getColumnCount().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "column",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to examine (the first column is 1, the second is 2, and\n    so on)."
            }
          ],
          "name": "getColumnDisplaySize(column)",
          "description": "For documentation of this method, seejava.sql.ResultSetMetaData#getColumnDisplaySize(int).",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "column",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to examine (the first column is 1, the second is 2, and\n    so on)."
            }
          ],
          "name": "getColumnLabel(column)",
          "description": "For documentation of this method, seejava.sql.ResultSetMetaData#getColumnLabel(int).",
          "return_type": {
            "name": "String",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "column",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to examine (the first column is 1, the second is 2, and\n    so on)."
            }
          ],
          "name": "getColumnName(column)",
          "description": "For documentation of this method, seejava.sql.ResultSetMetaData#getColumnName(int).",
          "return_type": {
            "name": "String",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "column",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to examine (the first column is 1, the second is 2, and\n    so on)."
            }
          ],
          "name": "getColumnType(column)",
          "description": "For documentation of this method, seejava.sql.ResultSetMetaData#getColumnType(int).",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "column",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to examine (the first column is 1, the second is 2, and\n    so on)."
            }
          ],
          "name": "getColumnTypeName(column)",
          "description": "For documentation of this method, seejava.sql.ResultSetMetaData#getColumnTypeName(int).",
          "return_type": {
            "name": "String",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "column",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to examine (the first column is 1, the second is 2, and\n    so on)."
            }
          ],
          "name": "getPrecision(column)",
          "description": "For documentation of this method, seejava.sql.ResultSetMetaData#getPrecision(int).",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "column",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to examine (the first column is 1, the second is 2, and\n    so on)."
            }
          ],
          "name": "getScale(column)",
          "description": "For documentation of this method, seejava.sql.ResultSetMetaData#getScale(int).",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "column",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to examine (the first column is 1, the second is 2, and\n    so on)."
            }
          ],
          "name": "getSchemaName(column)",
          "description": "For documentation of this method, seejava.sql.ResultSetMetaData#getSchemaName(int).",
          "return_type": {
            "name": "String",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "column",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to examine (the first column is 1, the second is 2, and\n    so on)."
            }
          ],
          "name": "getTableName(column)",
          "description": "For documentation of this method, seejava.sql.ResultSetMetaData#getTableName(int).",
          "return_type": {
            "name": "String",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "column",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to examine (the first column is 1, the second is 2, and\n    so on)."
            }
          ],
          "name": "isAutoIncrement(column)",
          "description": "For documentation of this method, seejava.sql.ResultSetMetaData#isAutoIncrement(int).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "column",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to examine (the first column is 1, the second is 2, and\n    so on)."
            }
          ],
          "name": "isCaseSensitive(column)",
          "description": "For documentation of this method, seejava.sql.ResultSetMetaData#isCaseSensitive(int).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "column",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to examine (the first column is 1, the second is 2, and\n    so on)."
            }
          ],
          "name": "isCurrency(column)",
          "description": "For documentation of this method, seejava.sql.ResultSetMetaData#isCurrency(int).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "column",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to examine (the first column is 1, the second is 2, and\n    so on)."
            }
          ],
          "name": "isDefinitelyWritable(column)",
          "description": "For documentation of this method, seejava.sql.ResultSetMetaData#isDefinitelyWritable(int).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "column",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to examine (the first column is 1, the second is 2, and\n    so on)."
            }
          ],
          "name": "isNullable(column)",
          "description": "For documentation of this method, seejava.sql.ResultSetMetaData#isNullable(int).",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "column",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to examine (the first column is 1, the second is 2, and\n    so on)."
            }
          ],
          "name": "isReadOnly(column)",
          "description": "For documentation of this method, seejava.sql.ResultSetMetaData#isReadOnly(int).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "column",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to examine (the first column is 1, the second is 2, and\n    so on)."
            }
          ],
          "name": "isSearchable(column)",
          "description": "For documentation of this method, seejava.sql.ResultSetMetaData#isSearchable(int).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "column",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to examine (the first column is 1, the second is 2, and\n    so on)."
            }
          ],
          "name": "isSigned(column)",
          "description": "For documentation of this method, seejava.sql.ResultSetMetaData#isSigned(int).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "column",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The index of the column to examine (the first column is 1, the second is 2, and\n    so on)."
            }
          ],
          "name": "isWritable(column)",
          "description": "For documentation of this method, seejava.sql.ResultSetMetaData#isWritable(int).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        }
      ]
    },
    {
      "name": "Class JdbcRowId",
      "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-row-id",
      "description": "",
      "methods": [
        {
          "parameters": [],
          "name": "getBytes()",
          "description": "For documentation of this method, seejava.sql.RowId#getBytes().",
          "return_type": {
            "name": "Byte[]",
            "url": null
          }
        }
      ]
    },
    {
      "name": "Class JdbcSavepoint",
      "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-savepoint",
      "description": "",
      "methods": [
        {
          "parameters": [],
          "name": "getSavepointId()",
          "description": "For documentation of this method, seejava.sql.Savepoint#getSavepointId().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getSavepointName()",
          "description": "For documentation of this method, seejava.sql.Savepoint#getSavepointName().",
          "return_type": {
            "name": "String",
            "url": null
          }
        }
      ]
    },
    {
      "name": "Class JdbcSQLXML",
      "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-sqlxml",
      "description": "",
      "methods": [
        {
          "parameters": [],
          "name": "free()",
          "description": "For documentation of this method, seejava.sql.SQLXML#free().",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getString()",
          "description": "For documentation of this method, seejava.sql.SQLXML#getString().",
          "return_type": {
            "name": "String",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "value",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The string representation of the XML value to set."
            }
          ],
          "name": "setString(value)",
          "description": "For documentation of this method, seejava.sql.SQLXML#setString(String).",
          "return_type": {
            "name": "void",
            "url": null
          }
        }
      ]
    },
    {
      "name": "Class JdbcStatement",
      "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-statement",
      "description": "",
      "methods": [
        {
          "parameters": [
            {
              "name": "sql",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The SQL command to add to this statement, typically an SQLINSERTorUPDATE."
            }
          ],
          "name": "addBatch(sql)",
          "description": "For documentation of this method, seejava.sql.Statement#addBatch(String).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "cancel()",
          "description": "For documentation of this method, seejava.sql.Statement#cancel().",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "clearBatch()",
          "description": "For documentation of this method, seejava.sql.Statement#clearBatch().",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "clearWarnings()",
          "description": "For documentation of this method, seejava.sql.Statement#clearWarnings().",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "close()",
          "description": "For documentation of this method, seejava.sql.Statement#close().",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "sql",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The SQL statement to execute."
            }
          ],
          "name": "execute(sql)",
          "description": "For documentation of this method, seejava.sql.Statement#execute(String).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "sql",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The SQL statement to execute."
            },
            {
              "name": "autoGeneratedKeys",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "A flag that indicates whether auto-generated keys are made available\n    for future retrieval; eitherJdbc.Statement.RETURN_GENERATED_KEYSorJdbc.Statement.NO_GENERATED_KEYS."
            }
          ],
          "name": "execute(sql, autoGeneratedKeys)",
          "description": "For documentation of this method, seejava.sql.Statement#execute(String, int).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "sql",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The SQL statement to execute."
            },
            {
              "name": "columnIndexes",
              "type": {
                "name": "Integer[]",
                "url": null
              },
              "description": "The column indices in the whose auto-generated keys are made available for\n    future retrieval."
            }
          ],
          "name": "execute(sql, columnIndexes)",
          "description": "For documentation of this method, seejava.sql.Statement#execute(String, int[]).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "sql",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The SQL statement to execute."
            },
            {
              "name": "columnNames",
              "type": {
                "name": "String[]",
                "url": null
              },
              "description": "The names of columns in the whose auto-generated keys are made available for\n    future retrieval."
            }
          ],
          "name": "execute(sql, columnNames)",
          "description": "For documentation of this method, seejava.sql.Statement#execute(String, String[]).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "executeBatch()",
          "description": "For documentation of this method, seejava.sql.Statement#executeBatch().",
          "return_type": {
            "name": "Integer[]",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "sql",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The SQL statement to execute, typically a staticSELECT."
            }
          ],
          "name": "executeQuery(sql)",
          "description": "For documentation of this method, seejava.sql.Statement#executeQuery(String).",
          "return_type": {
            "name": "JdbcResultSet",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-result-set"
          }
        },
        {
          "parameters": [
            {
              "name": "sql",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The SQL Data Manipulation Language statement to execute (such asINSERT,UPDATE, orDELETE), or else a statement that returns nothing (such as a DDL\n    statement)."
            }
          ],
          "name": "executeUpdate(sql)",
          "description": "For documentation of this method, seejava.sql.Statement#executeUpdate(String).",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "sql",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The SQL Data Manipulation Language statement to execute (such asINSERT,UPDATE, orDELETE), or else a statement that returns nothing (such as a DDL\n    statement)."
            },
            {
              "name": "autoGeneratedKeys",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "A flag that indicates whether auto-generated keys are made available\n    for future retrieval; eitherJdbc.Statement.RETURN_GENERATED_KEYSorJdbc.Statement.NO_GENERATED_KEYS."
            }
          ],
          "name": "executeUpdate(sql, autoGeneratedKeys)",
          "description": "For documentation of this method, seejava.sql.Statement#executeUpdate(String, int).",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "sql",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The SQL Data Manipulation Language statement to execute (such asINSERT,UPDATE, orDELETE), or else a statement that returns nothing (such as a DDL\n    statement)."
            },
            {
              "name": "columnIndexes",
              "type": {
                "name": "Integer[]",
                "url": null
              },
              "description": "The column indices in the whose auto-generated keys are made available for\n    future retrieval."
            }
          ],
          "name": "executeUpdate(sql, columnIndexes)",
          "description": "For documentation of this method, seejava.sql.Statement#executeUpdate(String, int[]).",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "sql",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The SQL Data Manipulation Language statement to execute (such asINSERT,UPDATE, orDELETE), or else a statement that returns nothing (such as a DDL\n    statement)."
            },
            {
              "name": "columnNames",
              "type": {
                "name": "String[]",
                "url": null
              },
              "description": "The names of columns in the whose auto-generated keys are made available for\n    future retrieval."
            }
          ],
          "name": "executeUpdate(sql, columnNames)",
          "description": "For documentation of this method, seejava.sql.Statement#executeUpdate(String, String[]).",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getConnection()",
          "description": "For documentation of this method, seejava.sql.Statement#getConnection().",
          "return_type": {
            "name": "JdbcConnection",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-connection"
          }
        },
        {
          "parameters": [],
          "name": "getFetchDirection()",
          "description": "For documentation of this method, seejava.sql.Statement#getFetchDirection().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getFetchSize()",
          "description": "For documentation of this method, seejava.sql.Statement#getFetchSize().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getGeneratedKeys()",
          "description": "For documentation of this method, seejava.sql.Statement#getGeneratedKeys().",
          "return_type": {
            "name": "JdbcResultSet",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-result-set"
          }
        },
        {
          "parameters": [],
          "name": "getMaxFieldSize()",
          "description": "For documentation of this method, seejava.sql.Statement#getMaxFieldSize().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getMaxRows()",
          "description": "For documentation of this method, seejava.sql.Statement#getMaxRows().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getMoreResults()",
          "description": "For documentation of this method, seejava.sql.Statement#getMoreResults().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "current",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "A flag that indicates what happens to current result sets when retrieved. This\n    value is one ofJdbc.Statement.CLOSE_CURRENT_RESULT,Jdbc.Statement.KEEP_CURRENT_RESULT, orJdbc.Statement.CLOSE_ALL_RESULTS."
            }
          ],
          "name": "getMoreResults(current)",
          "description": "For documentation of this method, seejava.sql.Statement#getMoreResults(int).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getQueryTimeout()",
          "description": "For documentation of this method, seejava.sql.Statement#getQueryTimeout().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getResultSet()",
          "description": "For documentation of this method, seejava.sql.Statement#getResultSet().",
          "return_type": {
            "name": "JdbcResultSet",
            "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-result-set"
          }
        },
        {
          "parameters": [],
          "name": "getResultSetConcurrency()",
          "description": "For documentation of this method, seejava.sql.Statement#getResultSetConcurrency().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getResultSetHoldability()",
          "description": "For documentation of this method, seejava.sql.Statement#getResultSetHoldability().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getResultSetType()",
          "description": "For documentation of this method, seejava.sql.Statement#getResultSetType().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getUpdateCount()",
          "description": "For documentation of this method, seejava.sql.Statement#getUpdateCount().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getWarnings()",
          "description": "For documentation of this method, seejava.sql.Statement#getWarnings().",
          "return_type": {
            "name": "String[]",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "isClosed()",
          "description": "For documentation of this method, seejava.sql.Statement#isClosed().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "isPoolable()",
          "description": "For documentation of this method, seejava.sql.Statement#isPoolable().",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "name",
              "type": {
                "name": "String",
                "url": null
              },
              "description": "The new cursor name, which must be unique within a connection."
            }
          ],
          "name": "setCursorName(name)",
          "description": "For documentation of this method, seejava.sql.Statement#setCursorName(String).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "enable",
              "type": {
                "name": "Boolean",
                "url": null
              },
              "description": "Iftrue, escape processing is enabled; otherwise it is disabled."
            }
          ],
          "name": "setEscapeProcessing(enable)",
          "description": "For documentation of this method, seejava.sql.Statement#setEscapeProcessing(boolean).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "direction",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The specified direction to set, which is eitherJdbc.ResultSet.FETCH_FORWARDorJdbc.ResultSet.FETCH_REVERSE."
            }
          ],
          "name": "setFetchDirection(direction)",
          "description": "For documentation of this method, seejava.sql.Statement#setFetchDirection(int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "rows",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The number of rows to fetch."
            }
          ],
          "name": "setFetchSize(rows)",
          "description": "For documentation of this method, seejava.sql.Statement#setFetchSize(int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "max",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The new column byte size limit; a value of zero indicates no limit."
            }
          ],
          "name": "setMaxFieldSize(max)",
          "description": "For documentation of this method, seejava.sql.Statement#setMaxFieldSize(int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "max",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The maximum number of rows a result set generated by this statement can have. A\n    value of 0 indicates no limit."
            }
          ],
          "name": "setMaxRows(max)",
          "description": "For documentation of this method, seejava.sql.Statement#setMaxRows(int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "poolable",
              "type": {
                "name": "Boolean",
                "url": null
              },
              "description": "Iftrue, requests that this statement be pooled; otherwise requests it\n    not be pooled."
            }
          ],
          "name": "setPoolable(poolable)",
          "description": "For documentation of this method, seejava.sql.Statement#setPoolable(boolean).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "seconds",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The new query timeout in seconds; a value of 0 indicates no timeout."
            }
          ],
          "name": "setQueryTimeout(seconds)",
          "description": "For documentation of this method, seejava.sql.Statement#setQueryTimeout(int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        }
      ]
    },
    {
      "name": "Class JdbcStruct",
      "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-struct",
      "description": "",
      "methods": [
        {
          "parameters": [],
          "name": "getAttributes()",
          "description": "For documentation of this method, seejava.sql.Struct#getAttributes().",
          "return_type": {
            "name": "Object[]",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getSQLTypeName()",
          "description": "For documentation of this method, seejava.sql.Struct#getSQLTypeName().",
          "return_type": {
            "name": "String",
            "url": null
          }
        }
      ]
    },
    {
      "name": "Class JdbcTime",
      "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-time",
      "description": "",
      "methods": [
        {
          "parameters": [
            {
              "name": "when",
              "type": {
                "name": "JdbcTime",
                "url": "https://developers.google.com/apps-script/reference"
              },
              "description": "A time to compare to."
            }
          ],
          "name": "after(when)",
          "description": "For documentation of this method, seejava.sql.Date#after(Date).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "when",
              "type": {
                "name": "JdbcTime",
                "url": "https://developers.google.com/apps-script/reference"
              },
              "description": "A time to compare to."
            }
          ],
          "name": "before(when)",
          "description": "For documentation of this method, seejava.sql.Date#before(Date).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getHours()",
          "description": "For documentation of this method, seejava.sql.Date#getHours().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getMinutes()",
          "description": "For documentation of this method, seejava.sql.Date#getMinutes().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getSeconds()",
          "description": "For documentation of this method, seejava.sql.Date#getSeconds().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getTime()",
          "description": "For documentation of this method, seejava.sql.Date#getTime().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "hours",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The hour to set; this object is updated to represent a point in time within the\n    specified hour of the day, with the year, month, date, minute, and second the same as\n    before, as interpreted in the local time zone."
            }
          ],
          "name": "setHours(hours)",
          "description": "For documentation of this method, seejava.sql.Date#setHours(int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "minutes",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The minutes to set; this object is updated to represent a point in time within\n    the specified minute of the hour, with the year, month, date, hour, and second the same as\n    before, as interpreted in the local time zone."
            }
          ],
          "name": "setMinutes(minutes)",
          "description": "For documentation of this method, seejava.sql.Date#setMinutes(int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "seconds",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The seconds to set; this object is updated to represent a point in time within\n    the specified second of the minute, with the year, month, date, hour, and minute the same\n    as before, as interpreted in the local time zone."
            }
          ],
          "name": "setSeconds(seconds)",
          "description": "For documentation of this method, seejava.sql.Date#setSeconds(int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "milliseconds",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The time value to set. The value is milliseconds since January 1, 1970,\n    00:00:00 GMT, while a negative number is milliseconds before that time."
            }
          ],
          "name": "setTime(milliseconds)",
          "description": "For documentation of this method, seejava.sql.Time#setTime(long).",
          "return_type": {
            "name": "void",
            "url": null
          }
        }
      ]
    },
    {
      "name": "Class JdbcTimestamp",
      "url": "https://developers.google.com/apps-script/reference/jdbc/jdbc-timestamp",
      "description": "",
      "methods": [
        {
          "parameters": [
            {
              "name": "when",
              "type": {
                "name": "JdbcTimestamp",
                "url": "https://developers.google.com/apps-script/reference"
              },
              "description": "A timestamp to compare to."
            }
          ],
          "name": "after(when)",
          "description": "For documentation of this method, seejava.sql.Timestamp#after(Timestamp).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "when",
              "type": {
                "name": "JdbcTimestamp",
                "url": "https://developers.google.com/apps-script/reference"
              },
              "description": "A timestamp to compare to."
            }
          ],
          "name": "before(when)",
          "description": "For documentation of this method, seejava.sql.Timestamp#before(Timestamp).",
          "return_type": {
            "name": "Boolean",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getDate()",
          "description": "For documentation of this method, seejava.sql.Date#getDate().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getHours()",
          "description": "For documentation of this method, seejava.sql.Date#getHours().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getMinutes()",
          "description": "For documentation of this method, seejava.sql.Date#getMinutes().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getMonth()",
          "description": "For documentation of this method, seejava.sql.Date#getMonth().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getNanos()",
          "description": "For documentation of this method, seejava.sql.Timestamp#getNanos().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getSeconds()",
          "description": "For documentation of this method, seejava.sql.Date#getSeconds().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getTime()",
          "description": "For documentation of this method, seejava.sql.Timestamp#getTime().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [],
          "name": "getYear()",
          "description": "For documentation of this method, seejava.sql.Date#getYear().",
          "return_type": {
            "name": "Integer",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "date",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The day of month to set. This timestamp is updated to represent a point in time\n    within the specified day of month, with the year, month, hour, minute, and second the same\n    as before, as interpreted in the local time zone. If the date was April 30, for example,\n    and the date is set to 31, then it is treated as if it were on May 1, because April has\n    only 30 days."
            }
          ],
          "name": "setDate(date)",
          "description": "For documentation of this method, seejava.sql.Date#setDate(int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "hours",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The hour to set; this object is updated to represent a point in time within the\n    specified hour of the day, with the year, month, date, minute, and second the same as\n    before, as interpreted in the local time zone."
            }
          ],
          "name": "setHours(hours)",
          "description": "For documentation of this method, seejava.sql.Date#setHours(int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "minutes",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The minutes to set; this object is updated to represent a point in time within\n    the specified minute of the hour, with the year, month, date, hour, and second the same as\n    before, as interpreted in the local time zone."
            }
          ],
          "name": "setMinutes(minutes)",
          "description": "For documentation of this method, seejava.sql.Date#setMinutes(int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "month",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The month to set. This timestamp is updated to represent a point in time within\n    the specified month, with the year, date, hour, minute, and second the same as before, as\n    interpreted in the local time zone. If the date was October 31, for example, and the month\n    is set to June, then the new date is treated as if it were on July 1, because June has only\n    30 days."
            }
          ],
          "name": "setMonth(month)",
          "description": "For documentation of this method, seejava.sql.Date#setMonth(int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "nanoseconds",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The new fractional seconds value."
            }
          ],
          "name": "setNanos(nanoseconds)",
          "description": "For documentation of this method, seejava.sql.Timestamp#setNanos(int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "seconds",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The seconds to set; this object is updated to represent a point in time within\n    the specified second of the minute, with the year, month, date, hour, and minute the same\n    as before, as interpreted in the local time zone."
            }
          ],
          "name": "setSeconds(seconds)",
          "description": "For documentation of this method, seejava.sql.Date#setSeconds(int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "milliseconds",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The time value to set. The value is milliseconds since January 1, 1970,\n    00:00:00 GMT."
            }
          ],
          "name": "setTime(milliseconds)",
          "description": "For documentation of this method, seejava.sql.Timestamp#setTime(long).",
          "return_type": {
            "name": "void",
            "url": null
          }
        },
        {
          "parameters": [
            {
              "name": "year",
              "type": {
                "name": "Integer",
                "url": null
              },
              "description": "The year value to set; the timestamp's year is set to this value plus 1900. This\n    timestamp is updated to represent a point in time within the specified year, with the\n    month, date, hour, minute, and second the same as before, as interpreted in the local time\n    zone. If the date was February 29, for example, and the year is set to a non-leap year,\n    then the new date is treated as if it were on March 1."
            }
          ],
          "name": "setYear(year)",
          "description": "For documentation of this method, seejava.sql.Date#setYear(int).",
          "return_type": {
            "name": "void",
            "url": null
          }
        }
      ]
    }
  ]
}